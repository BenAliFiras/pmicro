{
    "sourceFile": "controllers/userController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1697556946479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697556967173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,20 +142,9 @@\n   }\r\n   throw Error(\"incorrect email\");\r\n };\r\n \r\n-userSchema.statics.login2FA = async function (email, twoFactorCode) {\r\n-  const user = await this.findOne({ email });\r\n-  if (!user) {\r\n-    throw Error(\"incorrect email\");\r\n-  }\r\n-  if (user) {\r\n-    if (twoFactorCode !== user.two_factor_auth_code) {\r\n-      throw Error(\"incorrect 2fa code\");\r\n-    }\r\n-    return user;\r\n-  }\r\n-};\r\n \r\n+\r\n const User = mongoose.model(\"User\", userSchema);\r\n \r\n module.exports = User;\r\n"
                },
                {
                    "date": 1697556984832,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,15 +32,8 @@\n     type: String,\r\n     required: false,\r\n     enum: [\"Male\", \"Female\"],\r\n   },\r\n-  role: {\r\n-    type: String,\r\n-    required: false,\r\n-    maxlength: [50, \"Role should not exceed 50 characters\"],\r\n-    match: [/^[A-Za-z]+$/, \"role should only contain letters\"],\r\n-    enum: [\"Admin\", \"Expert\", \"Agence\", \"Client\"],\r\n-  },\r\n   date_of_birth: {\r\n     type: Date,\r\n     required: false,\r\n     min: [moment().subtract(120, \"years\"), \"You must be at most 120 years old\"],\r\n"
                },
                {
                    "date": 1697556991615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,12 +92,12 @@\n //     type: String,\r\n //     required: false,\r\n //     default:null\r\n //   },\r\n-//   decision: {\r\n-//     type: Boolean,\r\n-//     required: false,\r\n-//   },\r\n+  decision: {\r\n+    type: Boolean,\r\n+    required: false,\r\n+  },\r\n   is_available: {\r\n     type: Boolean,\r\n     required: false,\r\n   },\r\n"
                },
                {
                    "date": 1697557001910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,143 @@\n+const mongoose = require(\"mongoose\");\r\n+const { isEmail } = require(\"validator\");\r\n+const bcrypt = require(\"bcrypt\");\r\n+const moment = require(\"moment\");\r\n+\r\n+const userSchema = new mongoose.Schema({\r\n+  email: {\r\n+    type: String,\r\n+    required: [true, \"Please enter an email\"],\r\n+    unique: true,\r\n+    lowercase: true,\r\n+    validate: [isEmail, \"Please enter a valid email\"],\r\n+  },\r\n+  password: {\r\n+    type: String,\r\n+    required: [false, \"Please enter a password\"],\r\n+    minlength: [8, \"Minimum password length is 8 characters\"],\r\n+  },\r\n+  last_name: {\r\n+    type: String,\r\n+    required: true,\r\n+    minlength: [2, \"Last name should have at least 4 characters\"],\r\n+    maxlength: [50, \"Last name should not exceed 50 characters\"],\r\n+  },\r\n+  first_name: {\r\n+    type: String,\r\n+    required: true,\r\n+    minlength: [2, \"Last name should have at least 4 characters\"],\r\n+    maxlength: [50, \"First name should not exceed 50 characters\"],\r\n+  },\r\n+  gender: {\r\n+    type: String,\r\n+    required: false,\r\n+    enum: [\"Male\", \"Female\"],\r\n+  },\r\n+  date_of_birth: {\r\n+    type: Date,\r\n+    required: false,\r\n+    min: [moment().subtract(120, \"years\"), \"You must be at most 120 years old\"],\r\n+    max: [moment().subtract(18, \"years\"), \"You must be at least 18 years old\"],\r\n+  },\r\n+  address: {\r\n+    type: String,\r\n+    required: false,\r\n+    match: [\r\n+      /^[a-zA-Z0-9\\s,'-]*$/,\r\n+      \"Address should only contain letters, numbers, spaces, commas, apostrophes and hyphens\",\r\n+    ],\r\n+  },\r\n+  verified: {\r\n+    type: Boolean,\r\n+    default: false,\r\n+  },\r\n+  googleId: {\r\n+    type: String,\r\n+    required: false,\r\n+  },\r\n+  image: {\r\n+    type: String,\r\n+    required: false,\r\n+  },\r\n+  id: {\r\n+    type: String,\r\n+    required: false,\r\n+  },\r\n+  token: {\r\n+    type: String,\r\n+    required: false,\r\n+  },\r\n+  two_factor_auth: {\r\n+    type: String,\r\n+    required: false,\r\n+    maxlength: [50, \"Role should not exceed 50 characters\"],\r\n+    match: [/^[A-Za-z]+$/, \"role should only contain letters\"],\r\n+    enum: [\"none\", \"mail\", \"sms\"],\r\n+  },\r\n+  two_factor_auth_code: {\r\n+    type: String,\r\n+  },\r\n+  phone_number: {\r\n+    type: String,\r\n+    required: false,\r\n+    match: [\r\n+      /^\\+216\\d{8}$|^\\d{8}$/,\r\n+      \"Phone number should be in the format +21622147879 or 22147879\",\r\n+    ],\r\n+  },\r\n+  banned: {\r\n+    type: Boolean,\r\n+  },\r\n+//   id_agence: {\r\n+//     type: String,\r\n+//     required: false,\r\n+//     default:null\r\n+//   },\r\n+//   decision: {\r\n+//     type: Boolean,\r\n+//     required: false,\r\n+//   },\r\n+  is_available: {\r\n+    type: Boolean,\r\n+    required: false,\r\n+  },\r\n+  reset_token: {\r\n+    type: String,\r\n+    required: false,\r\n+  },\r\n+  statements_number: {\r\n+    type: Number,\r\n+    required: false,\r\n+  },\r\n+  expert_status: {\r\n+    type: Boolean,\r\n+    required: false,\r\n+  },  \r\n+});\r\n+\r\n+// fire a function before doc saved to db\r\n+userSchema.pre(\"save\", async function (next) {\r\n+  const salt = await bcrypt.genSalt();\r\n+  this.password = await bcrypt.hash(this.password, salt);\r\n+\r\n+  next();\r\n+});\r\n+\r\n+// static method to login user\r\n+userSchema.statics.login = async function (email, password) {\r\n+  const user = await this.findOne({ email });\r\n+  if (user) {\r\n+    const auth = await bcrypt.compare(password, user.password);\r\n+    if (auth) {\r\n+      return user;\r\n+    }\r\n+    throw Error(\"incorrect password\");\r\n+  }\r\n+  throw Error(\"incorrect email\");\r\n+};\r\n+\r\n+\r\n+\r\n+const User = mongoose.model(\"User\", userSchema);\r\n+\r\n+module.exports = User;\r\n"
                }
            ],
            "date": 1697556946479,
            "name": "Commit-0",
            "content": "const mongoose = require(\"mongoose\");\r\nconst { isEmail } = require(\"validator\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst moment = require(\"moment\");\r\n\r\nconst userSchema = new mongoose.Schema({\r\n  email: {\r\n    type: String,\r\n    required: [true, \"Please enter an email\"],\r\n    unique: true,\r\n    lowercase: true,\r\n    validate: [isEmail, \"Please enter a valid email\"],\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: [false, \"Please enter a password\"],\r\n    minlength: [8, \"Minimum password length is 8 characters\"],\r\n  },\r\n  last_name: {\r\n    type: String,\r\n    required: true,\r\n    minlength: [2, \"Last name should have at least 4 characters\"],\r\n    maxlength: [50, \"Last name should not exceed 50 characters\"],\r\n  },\r\n  first_name: {\r\n    type: String,\r\n    required: true,\r\n    minlength: [2, \"Last name should have at least 4 characters\"],\r\n    maxlength: [50, \"First name should not exceed 50 characters\"],\r\n  },\r\n  gender: {\r\n    type: String,\r\n    required: false,\r\n    enum: [\"Male\", \"Female\"],\r\n  },\r\n  role: {\r\n    type: String,\r\n    required: false,\r\n    maxlength: [50, \"Role should not exceed 50 characters\"],\r\n    match: [/^[A-Za-z]+$/, \"role should only contain letters\"],\r\n    enum: [\"Admin\", \"Expert\", \"Agence\", \"Client\"],\r\n  },\r\n  date_of_birth: {\r\n    type: Date,\r\n    required: false,\r\n    min: [moment().subtract(120, \"years\"), \"You must be at most 120 years old\"],\r\n    max: [moment().subtract(18, \"years\"), \"You must be at least 18 years old\"],\r\n  },\r\n  address: {\r\n    type: String,\r\n    required: false,\r\n    match: [\r\n      /^[a-zA-Z0-9\\s,'-]*$/,\r\n      \"Address should only contain letters, numbers, spaces, commas, apostrophes and hyphens\",\r\n    ],\r\n  },\r\n  verified: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  googleId: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  image: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  id: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  token: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  two_factor_auth: {\r\n    type: String,\r\n    required: false,\r\n    maxlength: [50, \"Role should not exceed 50 characters\"],\r\n    match: [/^[A-Za-z]+$/, \"role should only contain letters\"],\r\n    enum: [\"none\", \"mail\", \"sms\"],\r\n  },\r\n  two_factor_auth_code: {\r\n    type: String,\r\n  },\r\n  phone_number: {\r\n    type: String,\r\n    required: false,\r\n    match: [\r\n      /^\\+216\\d{8}$|^\\d{8}$/,\r\n      \"Phone number should be in the format +21622147879 or 22147879\",\r\n    ],\r\n  },\r\n  banned: {\r\n    type: Boolean,\r\n  },\r\n  id_agence: {\r\n    type: String,\r\n    required: false,\r\n    default:null\r\n  },\r\n  decision: {\r\n    type: Boolean,\r\n    required: false,\r\n  },\r\n  is_available: {\r\n    type: Boolean,\r\n    required: false,\r\n  },\r\n  reset_token: {\r\n    type: String,\r\n    required: false,\r\n  },\r\n  statements_number: {\r\n    type: Number,\r\n    required: false,\r\n  },\r\n  expert_status: {\r\n    type: Boolean,\r\n    required: false,\r\n  },  \r\n});\r\n\r\n// fire a function before doc saved to db\r\nuserSchema.pre(\"save\", async function (next) {\r\n  const salt = await bcrypt.genSalt();\r\n  this.password = await bcrypt.hash(this.password, salt);\r\n\r\n  next();\r\n});\r\n\r\n// static method to login user\r\nuserSchema.statics.login = async function (email, password) {\r\n  const user = await this.findOne({ email });\r\n  if (user) {\r\n    const auth = await bcrypt.compare(password, user.password);\r\n    if (auth) {\r\n      return user;\r\n    }\r\n    throw Error(\"incorrect password\");\r\n  }\r\n  throw Error(\"incorrect email\");\r\n};\r\n\r\nuserSchema.statics.login2FA = async function (email, twoFactorCode) {\r\n  const user = await this.findOne({ email });\r\n  if (!user) {\r\n    throw Error(\"incorrect email\");\r\n  }\r\n  if (user) {\r\n    if (twoFactorCode !== user.two_factor_auth_code) {\r\n      throw Error(\"incorrect 2fa code\");\r\n    }\r\n    return user;\r\n  }\r\n};\r\n\r\nconst User = mongoose.model(\"User\", userSchema);\r\n\r\nmodule.exports = User;\r\n"
        }
    ]
}