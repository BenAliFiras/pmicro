{
    "sourceFile": "src/views/aa",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1695929984407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1695929984407,
            "name": "Commit-0",
            "content": "import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Table, Button, Input, Form } from \"reactstrap\";\r\nimport jsPDF from \"jspdf\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./design.css\";\r\n\r\nclass EventList extends Component {\r\n  state = {\r\n    events: [],\r\n    filteredEvents: [], // Add a new state property for filtered events\r\n    startDateFilter: \"\", // Initialize start date filter\r\n    endDateFilter: \"\", // Initialize end date filter\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Fetch events from the API when the component mounts\r\n    axios\r\n      .get(\"http://localhost:8084/events\")\r\n      .then((response) => {\r\n        this.setState({ events: response.data, filteredEvents: response.data });\r\n        toast.success(\"Welcome to list event\"); // Display the welcome notification\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching events:\", error);\r\n      });\r\n  }\r\n\r\n  exportToPDF = () => {\r\n    const { filteredEvents } = this.state; // Use filtered events for exporting\r\n\r\n    // Create a new PDF document\r\n    const pdf = new jsPDF();\r\n\r\n    // Define the columns and rows for the table\r\n    const columns = [\r\n      \"ID\",\r\n      \"Event Name\",\r\n      \"Location\",\r\n      \"Start Date\",\r\n      \"End Date\",\r\n      \"Status\",\r\n      \"Image\",\r\n    ];\r\n    const data = filteredEvents.map((event) => [\r\n      event.id,\r\n      event.nom_event,\r\n      event.lieu_event,\r\n      event.date_debut,\r\n      event.date_fin,\r\n      event.isActive,\r\n      event.image_event,\r\n    ]);\r\n\r\n    // Auto-table plugin to create a table in PDF\r\n    pdf.autoTable({\r\n      head: [columns],\r\n      body: data,\r\n    });\r\n\r\n    // Save the PDF or open it in a new tab\r\n    pdf.save(\"EventList.pdf\");\r\n  };\r\n\r\n  handleDelete = (eventId) => {\r\n    // Make a DELETE request to delete the event with the given ID\r\n    axios\r\n      .delete(`http://localhost:8084/events/${eventId}`)\r\n      .then((response) => {\r\n        // Remove the deleted event from the state\r\n        this.setState((prevState) => ({\r\n          events: prevState.events.filter((event) => event.id !== eventId),\r\n          filteredEvents: prevState.filteredEvents.filter((event) => event.id !== eventId),\r\n        }));\r\n\r\n        // Display a success deletion notification\r\n        toast.success(\"Event deleted successfully\");\r\n\r\n        console.log(\"Event deleted:\", response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error deleting event:\", error);\r\n      });\r\n  };\r\n\r\n  // Handle start date filter change\r\n  handleStartDateFilterChange = (e) => {\r\n    this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n  };\r\n\r\n  // Handle end date filter change\r\n  handleEndDateFilterChange = (e) => {\r\n    this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n  };\r\n\r\n  // Filter events based on date range\r\n  filterEvents = () => {\r\n    const { events, startDateFilter, endDateFilter } = this.state;\r\n\r\n    const filteredEvents = events.filter((event) => {\r\n      const startDate = new Date(event.date_debut);\r\n      const endDate = new Date(event.date_fin);\r\n\r\n      // Check if the event's start date is after or equal to the start date filter\r\n      // and the event's end date is before or equal to the end date filter\r\n      return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n    });\r\n\r\n    this.setState({ filteredEvents });\r\n  };\r\n\r\n  render() {\r\n    const { startDateFilter, endDateFilter, filteredEvents } = this.state;\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        <ToastContainer />\r\n        <h1 className=\"mb-4\">Event List</h1>\r\n        <Form>\r\n          <Input\r\n            type=\"date\"\r\n            placeholder=\"Start Date\"\r\n            value={startDateFilter}\r\n            onChange={this.handleStartDateFilterChange}\r\n            className=\"mr-2\"\r\n          />\r\n          <Input\r\n            type=\"date\"\r\n            placeholder=\"End Date\"\r\n            value={endDateFilter}\r\n            onChange={this.handleEndDateFilterChange}\r\n            className=\"mr-2\"\r\n          />\r\n          <Button color=\"primary\" onClick={this.filterEvents}>\r\n            Apply Date Filter\r\n          </Button>\r\n          <Button\r\n            color=\"danger\"\r\n            onClick={() => {\r\n              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n            }}\r\n          >\r\n            Clear Filters\r\n          </Button>\r\n        </Form>\r\n        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n          Export to PDF\r\n        </Button>\r\n        <Table striped bordered hover responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Event Name</th>\r\n              <th>Location</th>\r\n              <th>Start Date</th>\r\n              <th>End Date</th>\r\n              <th>Status</th>\r\n              <th>Image</th>\r\n              <th>DELETE</th>\r\n              <th>EDIT</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {filteredEvents.map((event) => (\r\n              <tr key={event.id}>\r\n                <td>{event.id}</td>\r\n                <td>{event.nom_event}</td>\r\n                <td>{event.lieu_event}</td>\r\n                <td>{event.date_debut}</td>\r\n                <td>{event.date_fin}</td>\r\n                <td>\r\n                  {event.isActive === \"Active\" ? (\r\n                    <span className=\"active-circle\"></span>\r\n                  ) : (\r\n                    <span className=\"inactive-circle\"></span>\r\n                  )}\r\n                  {event.isActive}\r\n                </td>\r\n                <td>\r\n                  <img\r\n                    src={event.image_event}\r\n                    alt={event.nom_event}\r\n                    style={{ maxWidth: '100px' }}\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => this.handleDelete(event.id)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </td>\r\n                <td>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    onClick={() =>\r\n                      this.props.history.push(`/edit-event/${event.id}`)\r\n                    }\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n"
        }
    ]
}