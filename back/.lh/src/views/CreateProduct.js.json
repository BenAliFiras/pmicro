{
    "sourceFile": "src/views/CreateProduct.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1695856215305,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695856228121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n       imageProduit: this.state.imageProduit,\r\n       stockProduit: parseInt(this.state.stockProduit, 10),\r\n     };\r\n \r\n-    axios.post('http://your-api-url/products', newProduct)\r\n+    axios.post('http://http://localhost:8085/products', newProduct)\r\n       .then(response => {\r\n         console.log('Product created:', response.data);\r\n         // You can redirect to the product list page or perform other actions\r\n       })\r\n"
                },
                {
                    "date": 1695856421743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import React, { Component } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    const newProduct = {\r\n+      nomProduit: this.state.nomProduit,\r\n+      prixProduit: parseFloat(this.state.prixProduit),\r\n+      categorie: this.state.categorie,\r\n+      imageProduit: this.state.imageProduit,\r\n+      stockProduit: parseInt(this.state.stockProduit, 10),\r\n+    };\r\n+\r\n+    axios.post('http://your-api-url/products', newProduct)\r\n+      .then(response => {\r\n+        console.log('Product created:', response.data);\r\n+        // You can redirect to the product list page or perform other actions\r\n+      })\r\n+      .catch(error => {\r\n+        console.error('Error creating product:', error);\r\n+      });\r\n+  }\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div>\r\n+        <h2>Create Product</h2>\r\n+        <form onSubmit={this.handleSubmit}>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"nomProduit\" className=\"form-label\">Product Name:</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              className=\"form-control\"\r\n+              id=\"nomProduit\"\r\n+              name=\"nomProduit\"\r\n+              value={this.state.nomProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"prixProduit\" className=\"form-label\">Price:</label>\r\n+            <input\r\n+              type=\"number\"\r\n+              className=\"form-control\"\r\n+              id=\"prixProduit\"\r\n+              name=\"prixProduit\"\r\n+              value={this.state.prixProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"categorie\" className=\"form-label\">Category:</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              className=\"form-control\"\r\n+              id=\"categorie\"\r\n+              name=\"categorie\"\r\n+              value={this.state.categorie}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"imageProduit\" className=\"form-label\">Image URL:</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              className=\"form-control\"\r\n+              id=\"imageProduit\"\r\n+              name=\"imageProduit\"\r\n+              value={this.state.imageProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"stockProduit\" className=\"form-label\">Stock:</label>\r\n+            <input\r\n+              type=\"number\"\r\n+              className=\"form-control\"\r\n+              id=\"stockProduit\"\r\n+              name=\"stockProduit\"\r\n+              value={this.state.stockProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <button type=\"submit\" className=\"btn btn-primary\">Create Product</button>\r\n+        </form>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695856508626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,105 @@\n+import React, { Component } from 'react';\r\n+import axios from 'axios';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    const newProduct = {\r\n+      nomProduit: this.state.nomProduit,\r\n+      prixProduit: parseFloat(this.state.prixProduit),\r\n+      categorie: this.state.categorie,\r\n+      imageProduit: this.state.imageProduit,\r\n+      stockProduit: parseInt(this.state.stockProduit, 10),\r\n+    };\r\n+\r\n+    axios.post('http://localhost:8085/products', newProduct)\r\n+      .then(response => {\r\n+        console.log('Product created:', response.data);\r\n+        // You can redirect to the product list page or perform other actions\r\n+      })\r\n+      .catch(error => {\r\n+        console.error('Error creating product:', error);\r\n+      });\r\n+  }\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div>\r\n+        <h2>Create Product</h2>\r\n+        <form onSubmit={this.handleSubmit}>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"nomProduit\" className=\"form-label\">Product Name:</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              className=\"form-control\"\r\n+              id=\"nomProduit\"\r\n+              name=\"nomProduit\"\r\n+              value={this.state.nomProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"prixProduit\" className=\"form-label\">Price:</label>\r\n+            <input\r\n+              type=\"number\"\r\n+              className=\"form-control\"\r\n+              id=\"prixProduit\"\r\n+              name=\"prixProduit\"\r\n+              value={this.state.prixProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"categorie\" className=\"form-label\">Category:</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              className=\"form-control\"\r\n+              id=\"categorie\"\r\n+              name=\"categorie\"\r\n+              value={this.state.categorie}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"imageProduit\" className=\"form-label\">Image URL:</label>\r\n+            <input\r\n+              type=\"text\"\r\n+              className=\"form-control\"\r\n+              id=\"imageProduit\"\r\n+              name=\"imageProduit\"\r\n+              value={this.state.imageProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <div className=\"mb-3\">\r\n+            <label htmlFor=\"stockProduit\" className=\"form-label\">Stock:</label>\r\n+            <input\r\n+              type=\"number\"\r\n+              className=\"form-control\"\r\n+              id=\"stockProduit\"\r\n+              name=\"stockProduit\"\r\n+              value={this.state.stockProduit}\r\n+              onChange={this.handleChange}\r\n+            />\r\n+          </div>\r\n+          <button type=\"submit\" className=\"btn btn-primary\">Create Product</button>\r\n+        </form>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695924586146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,268 +1,165 @@\n import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n \r\n class CreateProduct extends Component {\r\n   state = {\r\n     nomProduit: '',\r\n     prixProduit: '',\r\n     categorie: '',\r\n     imageProduit: '',\r\n     stockProduit: '',\r\n+    errors: {},\r\n   };\r\n \r\n   handleChange = (e) => {\r\n     this.setState({ [e.target.name]: e.target.value });\r\n   }\r\n \r\n-  handleSubmit = (e) => {\r\n-    e.preventDefault();\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n \r\n-    const newProduct = {\r\n-      nomProduit: this.state.nomProduit,\r\n-      prixProduit: parseFloat(this.state.prixProduit),\r\n-      categorie: this.state.categorie,\r\n-      imageProduit: this.state.imageProduit,\r\n-      stockProduit: parseInt(this.state.stockProduit, 10),\r\n-    };\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n \r\n-    axios.post('http://localhost:8085/products', newProduct)\r\n-      .then(response => {\r\n-        console.log('Product created:', response.data);\r\n-        // You can redirect to the product list page or perform other actions\r\n-      })\r\n-      .catch(error => {\r\n-        console.error('Error creating product:', error);\r\n-      });\r\n-  }\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n \r\n-  render() {\r\n-    return (\r\n-      <div>\r\n-        <h2>Create Product</h2>\r\n-        <form onSubmit={this.handleSubmit}>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"nomProduit\" className=\"form-label\">Product Name:</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              className=\"form-control\"\r\n-              id=\"nomProduit\"\r\n-              name=\"nomProduit\"\r\n-              value={this.state.nomProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"prixProduit\" className=\"form-label\">Price:</label>\r\n-            <input\r\n-              type=\"number\"\r\n-              className=\"form-control\"\r\n-              id=\"prixProduit\"\r\n-              name=\"prixProduit\"\r\n-              value={this.state.prixProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"categorie\" className=\"form-label\">Category:</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              className=\"form-control\"\r\n-              id=\"categorie\"\r\n-              name=\"categorie\"\r\n-              value={this.state.categorie}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"imageProduit\" className=\"form-label\">Image URL:</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              className=\"form-control\"\r\n-              id=\"imageProduit\"\r\n-              name=\"imageProduit\"\r\n-              value={this.state.imageProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"stockProduit\" className=\"form-label\">Stock:</label>\r\n-            <input\r\n-              type=\"number\"\r\n-              className=\"form-control\"\r\n-              id=\"stockProduit\"\r\n-              name=\"stockProduit\"\r\n-              value={this.state.stockProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <button type=\"submit\" className=\"btn btn-primary\">Create Product</button>\r\n-        </form>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^[1-9]\\d*$/.test(stockProduit) ) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n \r\n-export default CreateProduct;\r\n-import React, { Component } from 'react';\r\n-import axios from 'axios';\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n \r\n-class CreateProduct extends Component {\r\n-  state = {\r\n-    nomProduit: '',\r\n-    prixProduit: '',\r\n-    categorie: '',\r\n-    imageProduit: '',\r\n-    stockProduit: '',\r\n-  };\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n \r\n-  handleChange = (e) => {\r\n-    this.setState({ [e.target.name]: e.target.value });\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n   }\r\n \r\n   handleSubmit = (e) => {\r\n     e.preventDefault();\r\n \r\n-    const newProduct = {\r\n-      nomProduit: this.state.nomProduit,\r\n-      prixProduit: parseFloat(this.state.prixProduit),\r\n-      categorie: this.state.categorie,\r\n-      imageProduit: this.state.imageProduit,\r\n-      stockProduit: parseInt(this.state.stockProduit, 10),\r\n-    };\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n \r\n-    axios.post('http://your-api-url/products', newProduct)\r\n-      .then(response => {\r\n-        console.log('Product created:', response.data);\r\n-        // You can redirect to the product list page or perform other actions\r\n-      })\r\n-      .catch(error => {\r\n-        console.error('Error creating product:', error);\r\n-      });\r\n-  }\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n \r\n-  render() {\r\n-    return (\r\n-      <div>\r\n-        <h2>Create Product</h2>\r\n-        <form onSubmit={this.handleSubmit}>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"nomProduit\" className=\"form-label\">Product Name:</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              className=\"form-control\"\r\n-              id=\"nomProduit\"\r\n-              name=\"nomProduit\"\r\n-              value={this.state.nomProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"prixProduit\" className=\"form-label\">Price:</label>\r\n-            <input\r\n-              type=\"number\"\r\n-              className=\"form-control\"\r\n-              id=\"prixProduit\"\r\n-              name=\"prixProduit\"\r\n-              value={this.state.prixProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"categorie\" className=\"form-label\">Category:</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              className=\"form-control\"\r\n-              id=\"categorie\"\r\n-              name=\"categorie\"\r\n-              value={this.state.categorie}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"imageProduit\" className=\"form-label\">Image URL:</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              className=\"form-control\"\r\n-              id=\"imageProduit\"\r\n-              name=\"imageProduit\"\r\n-              value={this.state.imageProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <div className=\"mb-3\">\r\n-            <label htmlFor=\"stockProduit\" className=\"form-label\">Stock:</label>\r\n-            <input\r\n-              type=\"number\"\r\n-              className=\"form-control\"\r\n-              id=\"stockProduit\"\r\n-              name=\"stockProduit\"\r\n-              value={this.state.stockProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          <button type=\"submit\" className=\"btn btn-primary\">Create Product</button>\r\n-        </form>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n \r\n-export default CreateProduct;\r\n-import React, { Component } from 'react';\r\n-import axios from 'axios';\r\n-\r\n-class CreateProduct extends Component {\r\n-  state = {\r\n-    nomProduit: '',\r\n-    prixProduit: '',\r\n-    categorie: '',\r\n-    imageProduit: '',\r\n-    stockProduit: '',\r\n-  };\r\n-\r\n-  handleChange = (e) => {\r\n-    this.setState({ [e.target.name]: e.target.value });\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n   }\r\n \r\n-  handleSubmit = (e) => {\r\n-    e.preventDefault();\r\n+  render() {\r\n+    const { errors } = this.state;\r\n \r\n-    const newProduct = {\r\n-      nomProduit: this.state.nomProduit,\r\n-      prixProduit: parseFloat(this.state.prixProduit),\r\n-      categorie: this.state.categorie,\r\n-      imageProduit: this.state.imageProduit,\r\n-      stockProduit: parseInt(this.state.stockProduit, 10),\r\n-    };\r\n-\r\n-    axios.post('http://http://localhost:8085/products', newProduct)\r\n-      .then(response => {\r\n-        console.log('Product created:', response.data);\r\n-        // You can redirect to the product list page or perform other actions\r\n-      })\r\n-      .catch(error => {\r\n-        console.error('Error creating product:', error);\r\n-      });\r\n-  }\r\n-\r\n-  render() {\r\n     return (\r\n-      <div>\r\n-        <h2>Create Product</h2>\r\n-        <form onSubmit={this.handleSubmit}>\r\n-          <div>\r\n-            <label>Product Name:</label>\r\n-            <input\r\n-              type=\"text\"\r\n-              name=\"nomProduit\"\r\n-              value={this.state.nomProduit}\r\n-              onChange={this.handleChange}\r\n-            />\r\n-          </div>\r\n-          {/* Include other form fields for prixProduit, categorie, imageProduit, stockProduit */}\r\n-          <button type=\"submit\">Create Product</button>\r\n-        </form>\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n       </div>\r\n     );\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1695924621790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n       errors.prixProduit = 'Invalid price';\r\n     }\r\n \r\n     // Validation for stockProduit: Should be a positive integer\r\n-    if (!/^[1-9]\\d*$/.test(stockProduit) ) {\r\n+    if (!/^[1-9]\\d*$/.test(stockProduit) || ) {\r\n       errors.stockProduit = 'Invalid stock';\r\n     }\r\n \r\n     // Validation for categorie: Should not be empty\r\n"
                },
                {
                    "date": 1695924676568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,167 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^[1-9]\\d*$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Stock must be a positive integer';\r\n+    }\r\n+\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695924733718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,166 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695925278637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"select\" // Use select type for the dropdown\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    >\r\n+                      <option value=\"\">Select a category</option>\r\n+                      <option value=\"Category 1\">Category 1</option>\r\n+                      <option value=\"Category 2\">Category 2</option>\r\n+                      <option value=\"Category 3\">Category 3</option>\r\n+                      <option value=\"Category 4\">Category 4</option>\r\n+                      <option value=\"Category 5\">Category 5</option>\r\n+                      <option value=\"Category 6\">Category 6</option>\r\n+                      <option value=\"Category 7\">Category 7</option>\r\n+                      <option value=\"Category 8\">Category 8</option>\r\n+                    </Input>\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695925324846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"select\" // Use select type for the dropdown\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    >\r\n+                      <option value=\"\">Select a category</option>\r\n+                      <option value=\"Category 1\">Oil Paints</option>\r\n+                      <option value=\"Category 2\">Category 2</option>\r\n+                      <option value=\"Category 3\">Category 3</option>\r\n+                      <option value=\"Category 4\">Category 4</option>\r\n+                      <option value=\"Category 5\">Category 5</option>\r\n+                      <option value=\"Category 6\">Category 6</option>\r\n+                      <option value=\"Category 7\">Category 7</option>\r\n+                      <option value=\"Category 8\">Category 8</option>\r\n+                    </Input>\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695925330688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"select\" // Use select type for the dropdown\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    >\r\n+                      <option value=\"\">Select a category</option>\r\n+                      <option value=\"Oil_Paints\">Oil Paints</option>\r\n+                      <option value=\"Category 2\">Category 2</option>\r\n+                      <option value=\"Category 3\">Category 3</option>\r\n+                      <option value=\"Category 4\">Category 4</option>\r\n+                      <option value=\"Category 5\">Category 5</option>\r\n+                      <option value=\"Category 6\">Category 6</option>\r\n+                      <option value=\"Category 7\">Category 7</option>\r\n+                      <option value=\"Category 8\">Category 8</option>\r\n+                    </Input>\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695925338453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"select\" // Use select type for the dropdown\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    >\r\n+                      <option value=\"\">Select a category</option>\r\n+                      <option value=\"Oil_Paints\">Oil Paints</option>\r\n+                      <option value=\"Category 2\">Acrylic Paints</option>\r\n+                      <option value=\"Category 3\">Category 3</option>\r\n+                      <option value=\"Category 4\">Category 4</option>\r\n+                      <option value=\"Category 5\">Category 5</option>\r\n+                      <option value=\"Category 6\">Category 6</option>\r\n+                      <option value=\"Category 7\">Category 7</option>\r\n+                      <option value=\"Category 8\">Category 8</option>\r\n+                    </Input>\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695925344634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"select\" // Use select type for the dropdown\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    >\r\n+                      <option value=\"\">Select a category</option>\r\n+                      <option value=\"Oil_Paints\">Oil Paints</option>\r\n+                      <option value=\"Acrylic_Paints\">Acrylic Paints</option>\r\n+                      <option value=\"Category 3\">Category 3</option>\r\n+                      <option value=\"Category 4\">Category 4</option>\r\n+                      <option value=\"Category 5\">Category 5</option>\r\n+                      <option value=\"Category 6\">Category 6</option>\r\n+                      <option value=\"Category 7\">Category 7</option>\r\n+                      <option value=\"Category 8\">Category 8</option>\r\n+                    </Input>\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695925351261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"select\" // Use select type for the dropdown\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    >\r\n+                      <option value=\"\">Select a category</option>\r\n+                      <option value=\"Oil_Paints\">Oil Paints</option>\r\n+                      <option value=\"Acrylic_Paints\">Acrylic Paints</option>\r\n+                      <option value=\"Category 3\">Watercolor Paints</option>\r\n+                      <option value=\"Category 4\">Category 4</option>\r\n+                      <option value=\"Category 5\">Category 5</option>\r\n+                      <option value=\"Category 6\">Category 6</option>\r\n+                      <option value=\"Category 7\">Category 7</option>\r\n+                      <option value=\"Category 8\">Category 8</option>\r\n+                    </Input>\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                },
                {
                    "date": 1695925356694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,9 +126,9 @@\n                     >\r\n                       <option value=\"\">Select a category</option>\r\n                       <option value=\"Oil_Paints\">Oil Paints</option>\r\n                       <option value=\"Acrylic_Paints\">Acrylic Paints</option>\r\n-                      <option value=\"Watercolor Paints\">Watercolor Paints</option>\r\n+                      <option value=\"Watercolor_Paints\">Watercolor Paints</option>\r\n                       <option value=\"Category 4\">Category 4</option>\r\n                       <option value=\"Category 5\">Category 5</option>\r\n                       <option value=\"Category 6\">Category 6</option>\r\n                       <option value=\"Category 7\">Category 7</option>\r\n"
                },
                {
                    "date": 1695925387602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,176 @@\n+import React, { Component } from 'react';\r\n+import { Button, Form, FormGroup, Label, Input, Row, Col, Card, CardHeader, CardBody, CardFooter, CardTitle } from 'reactstrap';\r\n+import axios from 'axios';\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+\r\n+class CreateProduct extends Component {\r\n+  state = {\r\n+    nomProduit: '',\r\n+    prixProduit: '',\r\n+    categorie: '',\r\n+    imageProduit: '',\r\n+    stockProduit: '',\r\n+    errors: {},\r\n+  };\r\n+\r\n+  handleChange = (e) => {\r\n+    this.setState({ [e.target.name]: e.target.value });\r\n+  }\r\n+\r\n+  validateForm = () => {\r\n+    const errors = {};\r\n+    const { nomProduit, prixProduit, stockProduit, categorie, imageProduit } = this.state;\r\n+\r\n+    // Validation for nomProduit: Should contain only letters and numbers\r\n+    if (!/^[A-Za-z0-9\\s]+$/.test(nomProduit)) {\r\n+      errors.nomProduit = 'Invalid product name';\r\n+    }\r\n+\r\n+    // Validation for prixProduit: Should be a positive number\r\n+    if (!/^\\d+(\\.\\d{1,2})?$/.test(prixProduit) || parseFloat(prixProduit) <= 0) {\r\n+      errors.prixProduit = 'Invalid price';\r\n+    }\r\n+\r\n+    // Validation for stockProduit: Should be a positive integer\r\n+    if (!/^(0|[1-9]\\d*)$/.test(stockProduit)) {\r\n+      errors.stockProduit = 'Invalid stock';\r\n+    }\r\n+    // Validation for categorie: Should not be empty\r\n+    if (!categorie.trim()) {\r\n+      errors.categorie = 'Category is required';\r\n+    }\r\n+\r\n+    // Validation for imageProduit: Should be a valid URL (You can add more specific checks if needed)\r\n+    if (!imageProduit.trim() || !/^https?:\\/\\/.+\\..+$/.test(imageProduit)) {\r\n+      errors.imageProduit = 'Invalid image URL';\r\n+    }\r\n+\r\n+    this.setState({ errors });\r\n+    return Object.keys(errors).length === 0;\r\n+  }\r\n+\r\n+  handleSubmit = (e) => {\r\n+    e.preventDefault();\r\n+\r\n+    if (this.validateForm()) {\r\n+      const newProduct = {\r\n+        nomProduit: this.state.nomProduit,\r\n+        prixProduit: parseFloat(this.state.prixProduit),\r\n+        categorie: this.state.categorie,\r\n+        imageProduit: this.state.imageProduit,\r\n+        stockProduit: parseInt(this.state.stockProduit, 10),\r\n+      };\r\n+\r\n+      axios.post('http://localhost:8085/products', newProduct)\r\n+        .then(response => {\r\n+          console.log('Product created:', response.data);\r\n+\r\n+          // Affichez une notification de succès\r\n+          toast.success('Product created successfully');\r\n+\r\n+          // Vous pouvez rediriger vers la page de la liste des produits ou effectuer d'autres actions ici\r\n+        })\r\n+        .catch(error => {\r\n+          console.error('Error creating product:', error);\r\n+        });\r\n+    }\r\n+  }\r\n+\r\n+  render() {\r\n+    const { errors } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <Row>\r\n+          <Col md=\"8\">\r\n+            <Card>\r\n+              <CardHeader>\r\n+                <CardTitle tag=\"h4\">Create Product</CardTitle>\r\n+              </CardHeader>\r\n+              <CardBody>\r\n+                <Form onSubmit={this.handleSubmit}>\r\n+                  <FormGroup>\r\n+                    <Label for=\"nomProduit\">Product Name</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"nomProduit\"\r\n+                      id=\"nomProduit\"\r\n+                      value={this.state.nomProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.nomProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.nomProduit && <div className=\"invalid-feedback\">{errors.nomProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"prixProduit\">Price (TND)</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"prixProduit\"\r\n+                      id=\"prixProduit\"\r\n+                      value={this.state.prixProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.prixProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.prixProduit && <div className=\"invalid-feedback\">{errors.prixProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"categorie\">Category</Label>\r\n+                    <Input\r\n+                      type=\"select\" // Use select type for the dropdown\r\n+                      name=\"categorie\"\r\n+                      id=\"categorie\"\r\n+                      value={this.state.categorie}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.categorie ? 'is-invalid' : ''}\r\n+                    >\r\n+    <option value=\"\">Select a category</option>\r\n+    <option value=\"Painting\">Painting</option>\r\n+    <option value=\"Sculpture\">Sculpture</option>\r\n+    <option value=\"Drawing\">Drawing</option>\r\n+    <option value=\"Photography\">Photography</option>\r\n+    <option value=\"Pottery\">Pottery</option>\r\n+    <option value=\"Printmaking\">Printmaking</option>\r\n+    <option value=\"Textile Arts\">Textile Arts</option>\r\n+    <option value=\"Mixed Media\">Mixed Media</option>\r\n+                    </Input>\r\n+                    {errors.categorie && <div className=\"invalid-feedback\">{errors.categorie}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"imageProduit\">Image URL</Label>\r\n+                    <Input\r\n+                      type=\"text\"\r\n+                      name=\"imageProduit\"\r\n+                      id=\"imageProduit\"\r\n+                      value={this.state.imageProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.imageProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.imageProduit && <div className=\"invalid-feedback\">{errors.imageProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <FormGroup>\r\n+                    <Label for=\"stockProduit\">Stock</Label>\r\n+                    <Input\r\n+                      type=\"number\"\r\n+                      name=\"stockProduit\"\r\n+                      id=\"stockProduit\"\r\n+                      value={this.state.stockProduit}\r\n+                      onChange={this.handleChange}\r\n+                      className={errors.stockProduit ? 'is-invalid' : ''}\r\n+                    />\r\n+                    {errors.stockProduit && <div className=\"invalid-feedback\">{errors.stockProduit}</div>}\r\n+                  </FormGroup>\r\n+                  <Button color=\"primary\" type=\"submit\">Create Product</Button>\r\n+                </Form>\r\n+              </CardBody>\r\n+              <CardFooter></CardFooter>\r\n+            </Card>\r\n+          </Col>\r\n+        </Row>\r\n+        <ToastContainer />\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default CreateProduct;\r\n"
                }
            ],
            "date": 1695856215305,
            "name": "Commit-0",
            "content": "import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nclass CreateProduct extends Component {\r\n  state = {\r\n    nomProduit: '',\r\n    prixProduit: '',\r\n    categorie: '',\r\n    imageProduit: '',\r\n    stockProduit: '',\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  }\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newProduct = {\r\n      nomProduit: this.state.nomProduit,\r\n      prixProduit: parseFloat(this.state.prixProduit),\r\n      categorie: this.state.categorie,\r\n      imageProduit: this.state.imageProduit,\r\n      stockProduit: parseInt(this.state.stockProduit, 10),\r\n    };\r\n\r\n    axios.post('http://your-api-url/products', newProduct)\r\n      .then(response => {\r\n        console.log('Product created:', response.data);\r\n        // You can redirect to the product list page or perform other actions\r\n      })\r\n      .catch(error => {\r\n        console.error('Error creating product:', error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>Create Product</h2>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <div>\r\n            <label>Product Name:</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"nomProduit\"\r\n              value={this.state.nomProduit}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n          {/* Include other form fields for prixProduit, categorie, imageProduit, stockProduit */}\r\n          <button type=\"submit\">Create Product</button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreateProduct;\r\n"
        }
    ]
}