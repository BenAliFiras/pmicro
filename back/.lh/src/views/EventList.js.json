{
    "sourceFile": "src/views/EventList.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 80,
            "patches": [
                {
                    "date": 1695923814928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695923823498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n+              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n+              <th>EDIT</th> {/* Add a new column for the delete button */}\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {event.isActive === \"Active\" ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {event.isActive}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n+                    alt={event.nom_event} // Texte alternatif pour l'image\r\n+                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929137462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,17 @@\n     // Fetch events from the API when the component mounts\r\n     axios\r\n       .get(\"http://localhost:8084/events\")\r\n       .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+        // Filter out inactive events based on the end date\r\n+        const filteredEvents = response.data.filter((event) => {\r\n+          const endDate = new Date(event.date_fin);\r\n+          const today = new Date();\r\n+          return event.isActive === \"Active\" && endDate >= today;\r\n+        });\r\n+\r\n+        this.setState({ events: filteredEvents });\r\n+        toast.success(\"Welcome to the event list\");\r\n       })\r\n       .catch((error) => {\r\n         console.error(\"Error fetching events:\", error);\r\n       });\r\n"
                },
                {
                    "date": 1695929220286,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,155 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n+              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n+              <th>EDIT</th> {/* Add a new column for the delete button */}\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {event.isActive === \"Active\" ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {event.isActive}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n+                    alt={event.nom_event} // Texte alternatif pour l'image\r\n+                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929344381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,160 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n+              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n+              <th>EDIT</th> {/* Add a new column for the delete button */}\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {event.isActive === \"Active\" ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {event.isActive}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n+                    alt={event.nom_event} // Texte alternatif pour l'image\r\n+                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929370626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929518812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: \"\", // Initialize start date filter to an empty string\r\n+    endDate: \"\",   // Initialize end date filter to an empty string\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929542214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,44 @@\n     const eventEndDate = new Date(endDate);\r\n \r\n     return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n   };\r\n+ // Handle changes in the start date input\r\n+ handleStartDateChange = (e) => {\r\n+  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n+};\r\n \r\n+// Handle changes in the end date input\r\n+handleEndDateChange = (e) => {\r\n+  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDate, endDate } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    if (!startDate && !endDate) {\r\n+      return true; // No date filter is applied\r\n+    }\r\n+\r\n+    const eventDate = new Date(event.date_debut);\r\n+    const filterStartDate = startDate ? new Date(startDate) : null;\r\n+    const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+    if (filterStartDate && filterEndDate) {\r\n+      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n+    } else if (filterStartDate) {\r\n+      return eventDate >= filterStartDate;\r\n+    } else if (filterEndDate) {\r\n+      return eventDate <= filterEndDate;\r\n+    }\r\n+\r\n+    return true;\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n   render() {\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n"
                },
                {
                    "date": 1695929571166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: \"\", // Initialize start date filter to an empty string\r\n+    endDate: \"\",   // Initialize end date filter to an empty string\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle changes in the start date input\r\n+ handleStartDateChange = (e) => {\r\n+  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle changes in the end date input\r\n+handleEndDateChange = (e) => {\r\n+  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDate, endDate } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    if (!startDate && !endDate) {\r\n+      return true; // No date filter is applied\r\n+    }\r\n+\r\n+    const eventDate = new Date(event.date_debut);\r\n+    const filterStartDate = startDate ? new Date(startDate) : null;\r\n+    const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+    if (filterStartDate && filterEndDate) {\r\n+      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n+    } else if (filterStartDate) {\r\n+      return eventDate >= filterStartDate;\r\n+    } else if (filterEndDate) {\r\n+      return eventDate <= filterEndDate;\r\n+    }\r\n+\r\n+    return true;\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+render() {\r\n+  return (\r\n+    <div className=\"content\">\r\n+      <ToastContainer />\r\n+      <h1 className=\"mb-4\">Event List</h1>\r\n+      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+        Export to PDF\r\n+      </Button>\r\n+      <FormGroup>\r\n+        <Label for=\"startDate\">Start Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          id=\"startDate\"\r\n+          value={this.state.startDate}\r\n+          onChange={this.handleStartDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <FormGroup>\r\n+        <Label for=\"endDate\">End Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          id=\"endDate\"\r\n+          value={this.state.endDate}\r\n+          onChange={this.handleEndDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <Table striped bordered hover responsive>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>ID</th>\r\n+            <th>Event Name</th>\r\n+            <th>Location</th>\r\n+            <th>Start Date</th>\r\n+            <th>End Date</th>\r\n+            <th>Status</th>\r\n+            <th>Image</th>\r\n+            <th>DELETE</th>\r\n+            <th>EDIT</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {this.state.filteredEvents.map((event) => (\r\n+            <tr key={event.id}>\r\n+              <td>{event.id}</td>\r\n+              <td>{event.nom_event}</td>\r\n+              <td>{event.lieu_event}</td>\r\n+              <td>{event.date_debut}</td>\r\n+              <td>{event.date_fin}</td>\r\n+              <td>\r\n+                {event.isActive === \"Active\" ? (\r\n+                  <span className=\"active-circle\"></span>\r\n+                ) : (\r\n+                  <span className=\"inactive-circle\"></span>\r\n+                )}\r\n+                {event.isActive}\r\n+              </td>\r\n+              <td>\r\n+                <img\r\n+                  src={event.image_event}\r\n+                  alt={event.nom_event}\r\n+                  style={{ maxWidth: '100px' }}\r\n+                />\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"danger\"\r\n+                  onClick={() => this.handleDelete(event.id)}\r\n+                >\r\n+                  Delete\r\n+                </Button>\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"primary\"\r\n+                  onClick={() =>\r\n+                    this.props.history.push(`/edit-event/${event.id}`)\r\n+                  }\r\n+                >\r\n+                  Edit\r\n+                </Button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </Table>\r\n+    </div>\r\n+  );\r\n+}\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929594303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+import { Table, Button, FormGroup, Label, Input } from \"reactstrap\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: \"\", // Initialize start date filter to an empty string\r\n+    endDate: \"\",   // Initialize end date filter to an empty string\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle changes in the start date input\r\n+ handleStartDateChange = (e) => {\r\n+  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle changes in the end date input\r\n+handleEndDateChange = (e) => {\r\n+  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDate, endDate } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    if (!startDate && !endDate) {\r\n+      return true; // No date filter is applied\r\n+    }\r\n+\r\n+    const eventDate = new Date(event.date_debut);\r\n+    const filterStartDate = startDate ? new Date(startDate) : null;\r\n+    const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+    if (filterStartDate && filterEndDate) {\r\n+      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n+    } else if (filterStartDate) {\r\n+      return eventDate >= filterStartDate;\r\n+    } else if (filterEndDate) {\r\n+      return eventDate <= filterEndDate;\r\n+    }\r\n+\r\n+    return true;\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+render() {\r\n+  return (\r\n+    <div className=\"content\">\r\n+      <ToastContainer />\r\n+      <h1 className=\"mb-4\">Event List</h1>\r\n+      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+        Export to PDF\r\n+      </Button>\r\n+      <FormGroup>\r\n+        <Label for=\"startDate\">Start Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          id=\"startDate\"\r\n+          value={this.state.startDate}\r\n+          onChange={this.handleStartDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <FormGroup>\r\n+        <Label for=\"endDate\">End Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          id=\"endDate\"\r\n+          value={this.state.endDate}\r\n+          onChange={this.handleEndDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <Table striped bordered hover responsive>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>ID</th>\r\n+            <th>Event Name</th>\r\n+            <th>Location</th>\r\n+            <th>Start Date</th>\r\n+            <th>End Date</th>\r\n+            <th>Status</th>\r\n+            <th>Image</th>\r\n+            <th>DELETE</th>\r\n+            <th>EDIT</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {this.state.filteredEvents.map((event) => (\r\n+            <tr key={event.id}>\r\n+              <td>{event.id}</td>\r\n+              <td>{event.nom_event}</td>\r\n+              <td>{event.lieu_event}</td>\r\n+              <td>{event.date_debut}</td>\r\n+              <td>{event.date_fin}</td>\r\n+              <td>\r\n+                {event.isActive === \"Active\" ? (\r\n+                  <span className=\"active-circle\"></span>\r\n+                ) : (\r\n+                  <span className=\"inactive-circle\"></span>\r\n+                )}\r\n+                {event.isActive}\r\n+              </td>\r\n+              <td>\r\n+                <img\r\n+                  src={event.image_event}\r\n+                  alt={event.nom_event}\r\n+                  style={{ maxWidth: '100px' }}\r\n+                />\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"danger\"\r\n+                  onClick={() => this.handleDelete(event.id)}\r\n+                >\r\n+                  Delete\r\n+                </Button>\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"primary\"\r\n+                  onClick={() =>\r\n+                    this.props.history.push(`/edit-event/${event.id}`)\r\n+                  }\r\n+                >\r\n+                  Edit\r\n+                </Button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </Table>\r\n+    </div>\r\n+  );\r\n+}\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929611579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+import {  Button, FormGroup, Label, Input } from \"reactstrap\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: \"\", // Initialize start date filter to an empty string\r\n+    endDate: \"\",   // Initialize end date filter to an empty string\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle changes in the start date input\r\n+ handleStartDateChange = (e) => {\r\n+  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle changes in the end date input\r\n+handleEndDateChange = (e) => {\r\n+  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDate, endDate } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    if (!startDate && !endDate) {\r\n+      return true; // No date filter is applied\r\n+    }\r\n+\r\n+    const eventDate = new Date(event.date_debut);\r\n+    const filterStartDate = startDate ? new Date(startDate) : null;\r\n+    const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+    if (filterStartDate && filterEndDate) {\r\n+      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n+    } else if (filterStartDate) {\r\n+      return eventDate >= filterStartDate;\r\n+    } else if (filterEndDate) {\r\n+      return eventDate <= filterEndDate;\r\n+    }\r\n+\r\n+    return true;\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+render() {\r\n+  return (\r\n+    <div className=\"content\">\r\n+      <ToastContainer />\r\n+      <h1 className=\"mb-4\">Event List</h1>\r\n+      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+        Export to PDF\r\n+      </Button>\r\n+      <FormGroup>\r\n+        <Label for=\"startDate\">Start Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          id=\"startDate\"\r\n+          value={this.state.startDate}\r\n+          onChange={this.handleStartDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <FormGroup>\r\n+        <Label for=\"endDate\">End Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          id=\"endDate\"\r\n+          value={this.state.endDate}\r\n+          onChange={this.handleEndDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <Table striped bordered hover responsive>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>ID</th>\r\n+            <th>Event Name</th>\r\n+            <th>Location</th>\r\n+            <th>Start Date</th>\r\n+            <th>End Date</th>\r\n+            <th>Status</th>\r\n+            <th>Image</th>\r\n+            <th>DELETE</th>\r\n+            <th>EDIT</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {this.state.filteredEvents.map((event) => (\r\n+            <tr key={event.id}>\r\n+              <td>{event.id}</td>\r\n+              <td>{event.nom_event}</td>\r\n+              <td>{event.lieu_event}</td>\r\n+              <td>{event.date_debut}</td>\r\n+              <td>{event.date_fin}</td>\r\n+              <td>\r\n+                {event.isActive === \"Active\" ? (\r\n+                  <span className=\"active-circle\"></span>\r\n+                ) : (\r\n+                  <span className=\"inactive-circle\"></span>\r\n+                )}\r\n+                {event.isActive}\r\n+              </td>\r\n+              <td>\r\n+                <img\r\n+                  src={event.image_event}\r\n+                  alt={event.nom_event}\r\n+                  style={{ maxWidth: '100px' }}\r\n+                />\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"danger\"\r\n+                  onClick={() => this.handleDelete(event.id)}\r\n+                >\r\n+                  Delete\r\n+                </Button>\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"primary\"\r\n+                  onClick={() =>\r\n+                    this.props.history.push(`/edit-event/${event.id}`)\r\n+                  }\r\n+                >\r\n+                  Edit\r\n+                </Button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </Table>\r\n+    </div>\r\n+  );\r\n+}\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929620814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+import {  } from \"reactstrap\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: \"\", // Initialize start date filter to an empty string\r\n+    endDate: \"\",   // Initialize end date filter to an empty string\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle changes in the start date input\r\n+ handleStartDateChange = (e) => {\r\n+  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle changes in the end date input\r\n+handleEndDateChange = (e) => {\r\n+  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDate, endDate } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    if (!startDate && !endDate) {\r\n+      return true; // No date filter is applied\r\n+    }\r\n+\r\n+    const eventDate = new Date(event.date_debut);\r\n+    const filterStartDate = startDate ? new Date(startDate) : null;\r\n+    const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+    if (filterStartDate && filterEndDate) {\r\n+      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n+    } else if (filterStartDate) {\r\n+      return eventDate >= filterStartDate;\r\n+    } else if (filterEndDate) {\r\n+      return eventDate <= filterEndDate;\r\n+    }\r\n+\r\n+    return true;\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+render() {\r\n+  return (\r\n+    <div className=\"content\">\r\n+      <ToastContainer />\r\n+      <h1 className=\"mb-4\">Event List</h1>\r\n+      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+        Export to PDF\r\n+      </Button>\r\n+      <FormGroup>\r\n+        <Label for=\"startDate\">Start Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          id=\"startDate\"\r\n+          value={this.state.startDate}\r\n+          onChange={this.handleStartDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <FormGroup>\r\n+        <Label for=\"endDate\">End Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          id=\"endDate\"\r\n+          value={this.state.endDate}\r\n+          onChange={this.handleEndDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <Table striped bordered hover responsive>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>ID</th>\r\n+            <th>Event Name</th>\r\n+            <th>Location</th>\r\n+            <th>Start Date</th>\r\n+            <th>End Date</th>\r\n+            <th>Status</th>\r\n+            <th>Image</th>\r\n+            <th>DELETE</th>\r\n+            <th>EDIT</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {this.state.filteredEvents.map((event) => (\r\n+            <tr key={event.id}>\r\n+              <td>{event.id}</td>\r\n+              <td>{event.nom_event}</td>\r\n+              <td>{event.lieu_event}</td>\r\n+              <td>{event.date_debut}</td>\r\n+              <td>{event.date_fin}</td>\r\n+              <td>\r\n+                {event.isActive === \"Active\" ? (\r\n+                  <span className=\"active-circle\"></span>\r\n+                ) : (\r\n+                  <span className=\"inactive-circle\"></span>\r\n+                )}\r\n+                {event.isActive}\r\n+              </td>\r\n+              <td>\r\n+                <img\r\n+                  src={event.image_event}\r\n+                  alt={event.nom_event}\r\n+                  style={{ maxWidth: '100px' }}\r\n+                />\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"danger\"\r\n+                  onClick={() => this.handleDelete(event.id)}\r\n+                >\r\n+                  Delete\r\n+                </Button>\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"primary\"\r\n+                  onClick={() =>\r\n+                    this.props.history.push(`/edit-event/${event.id}`)\r\n+                  }\r\n+                >\r\n+                  Edit\r\n+                </Button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </Table>\r\n+    </div>\r\n+  );\r\n+}\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929626012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , FormGroup, Label, Input} from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+import {  } from \"reactstrap\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: \"\", // Initialize start date filter to an empty string\r\n+    endDate: \"\",   // Initialize end date filter to an empty string\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle changes in the start date input\r\n+ handleStartDateChange = (e) => {\r\n+  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle changes in the end date input\r\n+handleEndDateChange = (e) => {\r\n+  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDate, endDate } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    if (!startDate && !endDate) {\r\n+      return true; // No date filter is applied\r\n+    }\r\n+\r\n+    const eventDate = new Date(event.date_debut);\r\n+    const filterStartDate = startDate ? new Date(startDate) : null;\r\n+    const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+    if (filterStartDate && filterEndDate) {\r\n+      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n+    } else if (filterStartDate) {\r\n+      return eventDate >= filterStartDate;\r\n+    } else if (filterEndDate) {\r\n+      return eventDate <= filterEndDate;\r\n+    }\r\n+\r\n+    return true;\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+render() {\r\n+  return (\r\n+    <div className=\"content\">\r\n+      <ToastContainer />\r\n+      <h1 className=\"mb-4\">Event List</h1>\r\n+      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+        Export to PDF\r\n+      </Button>\r\n+      <FormGroup>\r\n+        <Label for=\"startDate\">Start Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          id=\"startDate\"\r\n+          value={this.state.startDate}\r\n+          onChange={this.handleStartDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <FormGroup>\r\n+        <Label for=\"endDate\">End Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          id=\"endDate\"\r\n+          value={this.state.endDate}\r\n+          onChange={this.handleEndDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <Table striped bordered hover responsive>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>ID</th>\r\n+            <th>Event Name</th>\r\n+            <th>Location</th>\r\n+            <th>Start Date</th>\r\n+            <th>End Date</th>\r\n+            <th>Status</th>\r\n+            <th>Image</th>\r\n+            <th>DELETE</th>\r\n+            <th>EDIT</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {this.state.filteredEvents.map((event) => (\r\n+            <tr key={event.id}>\r\n+              <td>{event.id}</td>\r\n+              <td>{event.nom_event}</td>\r\n+              <td>{event.lieu_event}</td>\r\n+              <td>{event.date_debut}</td>\r\n+              <td>{event.date_fin}</td>\r\n+              <td>\r\n+                {event.isActive === \"Active\" ? (\r\n+                  <span className=\"active-circle\"></span>\r\n+                ) : (\r\n+                  <span className=\"inactive-circle\"></span>\r\n+                )}\r\n+                {event.isActive}\r\n+              </td>\r\n+              <td>\r\n+                <img\r\n+                  src={event.image_event}\r\n+                  alt={event.nom_event}\r\n+                  style={{ maxWidth: '100px' }}\r\n+                />\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"danger\"\r\n+                  onClick={() => this.handleDelete(event.id)}\r\n+                >\r\n+                  Delete\r\n+                </Button>\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"primary\"\r\n+                  onClick={() =>\r\n+                    this.props.history.push(`/edit-event/${event.id}`)\r\n+                  }\r\n+                >\r\n+                  Edit\r\n+                </Button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </Table>\r\n+    </div>\r\n+  );\r\n+}\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929662516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,219 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+import { FormGroup, Label, Input } from \"reactstrap\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: \"\", // Initialize start date filter to an empty string\r\n+    endDate: \"\",   // Initialize end date filter to an empty string\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle changes in the start date input\r\n+ handleStartDateChange = (e) => {\r\n+  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle changes in the end date input\r\n+handleEndDateChange = (e) => {\r\n+  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDate, endDate } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    if (!startDate && !endDate) {\r\n+      return true; // No date filter is applied\r\n+    }\r\n+\r\n+    const eventDate = new Date(event.date_debut);\r\n+    const filterStartDate = startDate ? new Date(startDate) : null;\r\n+    const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+    if (filterStartDate && filterEndDate) {\r\n+      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n+    } else if (filterStartDate) {\r\n+      return eventDate >= filterStartDate;\r\n+    } else if (filterEndDate) {\r\n+      return eventDate <= filterEndDate;\r\n+    }\r\n+\r\n+    return true;\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+render() {\r\n+  return (\r\n+    <div className=\"content\">\r\n+      <ToastContainer />\r\n+      <h1 className=\"mb-4\">Event List</h1>\r\n+      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+        Export to PDF\r\n+      </Button>\r\n+      <FormGroup>\r\n+        <Label for=\"startDate\">Start Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          id=\"startDate\"\r\n+          value={this.state.startDate}\r\n+          onChange={this.handleStartDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <FormGroup>\r\n+        <Label for=\"endDate\">End Date:</Label>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          id=\"endDate\"\r\n+          value={this.state.endDate}\r\n+          onChange={this.handleEndDateChange}\r\n+        />\r\n+      </FormGroup>\r\n+      <Table striped bordered hover responsive>\r\n+        <thead>\r\n+          <tr>\r\n+            <th>ID</th>\r\n+            <th>Event Name</th>\r\n+            <th>Location</th>\r\n+            <th>Start Date</th>\r\n+            <th>End Date</th>\r\n+            <th>Status</th>\r\n+            <th>Image</th>\r\n+            <th>DELETE</th>\r\n+            <th>EDIT</th>\r\n+          </tr>\r\n+        </thead>\r\n+        <tbody>\r\n+          {this.state.filteredEvents.map((event) => (\r\n+            <tr key={event.id}>\r\n+              <td>{event.id}</td>\r\n+              <td>{event.nom_event}</td>\r\n+              <td>{event.lieu_event}</td>\r\n+              <td>{event.date_debut}</td>\r\n+              <td>{event.date_fin}</td>\r\n+              <td>\r\n+                {event.isActive === \"Active\" ? (\r\n+                  <span className=\"active-circle\"></span>\r\n+                ) : (\r\n+                  <span className=\"inactive-circle\"></span>\r\n+                )}\r\n+                {event.isActive}\r\n+              </td>\r\n+              <td>\r\n+                <img\r\n+                  src={event.image_event}\r\n+                  alt={event.nom_event}\r\n+                  style={{ maxWidth: '100px' }}\r\n+                />\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"danger\"\r\n+                  onClick={() => this.handleDelete(event.id)}\r\n+                >\r\n+                  Delete\r\n+                </Button>\r\n+              </td>\r\n+              <td>\r\n+                <Button\r\n+                  color=\"primary\"\r\n+                  onClick={() =>\r\n+                    this.props.history.push(`/edit-event/${event.id}`)\r\n+                  }\r\n+                >\r\n+                  Edit\r\n+                </Button>\r\n+              </td>\r\n+            </tr>\r\n+          ))}\r\n+        </tbody>\r\n+      </Table>\r\n+    </div>\r\n+  );\r\n+}\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929758960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import jsPDF from \"jspdf\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import \"./design.css\";\r\n-import { FormGroup, Label, Input } from \"reactstrap\";\r\n \r\n class EventList extends Component {\r\n   state = {\r\n     events: [],\r\n@@ -123,1328 +122,36 @@\n   });\r\n \r\n   this.setState({ filteredEvents });\r\n };\r\n-render() {\r\n-  return (\r\n-    <div className=\"content\">\r\n-      <ToastContainer />\r\n-      <h1 className=\"mb-4\">Event List</h1>\r\n-      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-        Export to PDF\r\n-      </Button>\r\n-      <FormGroup>\r\n-        <Label for=\"startDate\">Start Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          id=\"startDate\"\r\n-          value={this.state.startDate}\r\n-          onChange={this.handleStartDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <FormGroup>\r\n-        <Label for=\"endDate\">End Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          id=\"endDate\"\r\n-          value={this.state.endDate}\r\n-          onChange={this.handleEndDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <Table striped bordered hover responsive>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>ID</th>\r\n-            <th>Event Name</th>\r\n-            <th>Location</th>\r\n-            <th>Start Date</th>\r\n-            <th>End Date</th>\r\n-            <th>Status</th>\r\n-            <th>Image</th>\r\n-            <th>DELETE</th>\r\n-            <th>EDIT</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {this.state.filteredEvents.map((event) => (\r\n-            <tr key={event.id}>\r\n-              <td>{event.id}</td>\r\n-              <td>{event.nom_event}</td>\r\n-              <td>{event.lieu_event}</td>\r\n-              <td>{event.date_debut}</td>\r\n-              <td>{event.date_fin}</td>\r\n-              <td>\r\n-                {event.isActive === \"Active\" ? (\r\n-                  <span className=\"active-circle\"></span>\r\n-                ) : (\r\n-                  <span className=\"inactive-circle\"></span>\r\n-                )}\r\n-                {event.isActive}\r\n-              </td>\r\n-              <td>\r\n-                <img\r\n-                  src={event.image_event}\r\n-                  alt={event.nom_event}\r\n-                  style={{ maxWidth: '100px' }}\r\n-                />\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"danger\"\r\n-                  onClick={() => this.handleDelete(event.id)}\r\n-                >\r\n-                  Delete\r\n-                </Button>\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"primary\"\r\n-                  onClick={() =>\r\n-                    this.props.history.push(`/edit-event/${event.id}`)\r\n-                  }\r\n-                >\r\n-                  Edit\r\n-                </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </Table>\r\n-    </div>\r\n-  );\r\n-}\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , FormGroup, Label, Input} from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-import {  } from \"reactstrap\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: \"\", // Initialize start date filter to an empty string\r\n-    endDate: \"\",   // Initialize end date filter to an empty string\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle changes in the start date input\r\n- handleStartDateChange = (e) => {\r\n-  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle changes in the end date input\r\n-handleEndDateChange = (e) => {\r\n-  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDate, endDate } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    if (!startDate && !endDate) {\r\n-      return true; // No date filter is applied\r\n-    }\r\n-\r\n-    const eventDate = new Date(event.date_debut);\r\n-    const filterStartDate = startDate ? new Date(startDate) : null;\r\n-    const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-    if (filterStartDate && filterEndDate) {\r\n-      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n-    } else if (filterStartDate) {\r\n-      return eventDate >= filterStartDate;\r\n-    } else if (filterEndDate) {\r\n-      return eventDate <= filterEndDate;\r\n-    }\r\n-\r\n-    return true;\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-render() {\r\n-  return (\r\n-    <div className=\"content\">\r\n-      <ToastContainer />\r\n-      <h1 className=\"mb-4\">Event List</h1>\r\n-      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-        Export to PDF\r\n-      </Button>\r\n-      <FormGroup>\r\n-        <Label for=\"startDate\">Start Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          id=\"startDate\"\r\n-          value={this.state.startDate}\r\n-          onChange={this.handleStartDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <FormGroup>\r\n-        <Label for=\"endDate\">End Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          id=\"endDate\"\r\n-          value={this.state.endDate}\r\n-          onChange={this.handleEndDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <Table striped bordered hover responsive>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>ID</th>\r\n-            <th>Event Name</th>\r\n-            <th>Location</th>\r\n-            <th>Start Date</th>\r\n-            <th>End Date</th>\r\n-            <th>Status</th>\r\n-            <th>Image</th>\r\n-            <th>DELETE</th>\r\n-            <th>EDIT</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {this.state.filteredEvents.map((event) => (\r\n-            <tr key={event.id}>\r\n-              <td>{event.id}</td>\r\n-              <td>{event.nom_event}</td>\r\n-              <td>{event.lieu_event}</td>\r\n-              <td>{event.date_debut}</td>\r\n-              <td>{event.date_fin}</td>\r\n-              <td>\r\n-                {event.isActive === \"Active\" ? (\r\n-                  <span className=\"active-circle\"></span>\r\n-                ) : (\r\n-                  <span className=\"inactive-circle\"></span>\r\n-                )}\r\n-                {event.isActive}\r\n-              </td>\r\n-              <td>\r\n-                <img\r\n-                  src={event.image_event}\r\n-                  alt={event.nom_event}\r\n-                  style={{ maxWidth: '100px' }}\r\n-                />\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"danger\"\r\n-                  onClick={() => this.handleDelete(event.id)}\r\n-                >\r\n-                  Delete\r\n-                </Button>\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"primary\"\r\n-                  onClick={() =>\r\n-                    this.props.history.push(`/edit-event/${event.id}`)\r\n-                  }\r\n-                >\r\n-                  Edit\r\n-                </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </Table>\r\n-    </div>\r\n-  );\r\n-}\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-import {  } from \"reactstrap\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: \"\", // Initialize start date filter to an empty string\r\n-    endDate: \"\",   // Initialize end date filter to an empty string\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle changes in the start date input\r\n- handleStartDateChange = (e) => {\r\n-  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle changes in the end date input\r\n-handleEndDateChange = (e) => {\r\n-  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDate, endDate } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    if (!startDate && !endDate) {\r\n-      return true; // No date filter is applied\r\n-    }\r\n-\r\n-    const eventDate = new Date(event.date_debut);\r\n-    const filterStartDate = startDate ? new Date(startDate) : null;\r\n-    const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-    if (filterStartDate && filterEndDate) {\r\n-      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n-    } else if (filterStartDate) {\r\n-      return eventDate >= filterStartDate;\r\n-    } else if (filterEndDate) {\r\n-      return eventDate <= filterEndDate;\r\n-    }\r\n-\r\n-    return true;\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-render() {\r\n-  return (\r\n-    <div className=\"content\">\r\n-      <ToastContainer />\r\n-      <h1 className=\"mb-4\">Event List</h1>\r\n-      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-        Export to PDF\r\n-      </Button>\r\n-      <FormGroup>\r\n-        <Label for=\"startDate\">Start Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          id=\"startDate\"\r\n-          value={this.state.startDate}\r\n-          onChange={this.handleStartDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <FormGroup>\r\n-        <Label for=\"endDate\">End Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          id=\"endDate\"\r\n-          value={this.state.endDate}\r\n-          onChange={this.handleEndDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <Table striped bordered hover responsive>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>ID</th>\r\n-            <th>Event Name</th>\r\n-            <th>Location</th>\r\n-            <th>Start Date</th>\r\n-            <th>End Date</th>\r\n-            <th>Status</th>\r\n-            <th>Image</th>\r\n-            <th>DELETE</th>\r\n-            <th>EDIT</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {this.state.filteredEvents.map((event) => (\r\n-            <tr key={event.id}>\r\n-              <td>{event.id}</td>\r\n-              <td>{event.nom_event}</td>\r\n-              <td>{event.lieu_event}</td>\r\n-              <td>{event.date_debut}</td>\r\n-              <td>{event.date_fin}</td>\r\n-              <td>\r\n-                {event.isActive === \"Active\" ? (\r\n-                  <span className=\"active-circle\"></span>\r\n-                ) : (\r\n-                  <span className=\"inactive-circle\"></span>\r\n-                )}\r\n-                {event.isActive}\r\n-              </td>\r\n-              <td>\r\n-                <img\r\n-                  src={event.image_event}\r\n-                  alt={event.nom_event}\r\n-                  style={{ maxWidth: '100px' }}\r\n-                />\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"danger\"\r\n-                  onClick={() => this.handleDelete(event.id)}\r\n-                >\r\n-                  Delete\r\n-                </Button>\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"primary\"\r\n-                  onClick={() =>\r\n-                    this.props.history.push(`/edit-event/${event.id}`)\r\n-                  }\r\n-                >\r\n-                  Edit\r\n-                </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </Table>\r\n-    </div>\r\n-  );\r\n-}\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-import {  Button, FormGroup, Label, Input } from \"reactstrap\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: \"\", // Initialize start date filter to an empty string\r\n-    endDate: \"\",   // Initialize end date filter to an empty string\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle changes in the start date input\r\n- handleStartDateChange = (e) => {\r\n-  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle changes in the end date input\r\n-handleEndDateChange = (e) => {\r\n-  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDate, endDate } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    if (!startDate && !endDate) {\r\n-      return true; // No date filter is applied\r\n-    }\r\n-\r\n-    const eventDate = new Date(event.date_debut);\r\n-    const filterStartDate = startDate ? new Date(startDate) : null;\r\n-    const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-    if (filterStartDate && filterEndDate) {\r\n-      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n-    } else if (filterStartDate) {\r\n-      return eventDate >= filterStartDate;\r\n-    } else if (filterEndDate) {\r\n-      return eventDate <= filterEndDate;\r\n-    }\r\n-\r\n-    return true;\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-render() {\r\n-  return (\r\n-    <div className=\"content\">\r\n-      <ToastContainer />\r\n-      <h1 className=\"mb-4\">Event List</h1>\r\n-      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-        Export to PDF\r\n-      </Button>\r\n-      <FormGroup>\r\n-        <Label for=\"startDate\">Start Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          id=\"startDate\"\r\n-          value={this.state.startDate}\r\n-          onChange={this.handleStartDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <FormGroup>\r\n-        <Label for=\"endDate\">End Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          id=\"endDate\"\r\n-          value={this.state.endDate}\r\n-          onChange={this.handleEndDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <Table striped bordered hover responsive>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>ID</th>\r\n-            <th>Event Name</th>\r\n-            <th>Location</th>\r\n-            <th>Start Date</th>\r\n-            <th>End Date</th>\r\n-            <th>Status</th>\r\n-            <th>Image</th>\r\n-            <th>DELETE</th>\r\n-            <th>EDIT</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {this.state.filteredEvents.map((event) => (\r\n-            <tr key={event.id}>\r\n-              <td>{event.id}</td>\r\n-              <td>{event.nom_event}</td>\r\n-              <td>{event.lieu_event}</td>\r\n-              <td>{event.date_debut}</td>\r\n-              <td>{event.date_fin}</td>\r\n-              <td>\r\n-                {event.isActive === \"Active\" ? (\r\n-                  <span className=\"active-circle\"></span>\r\n-                ) : (\r\n-                  <span className=\"inactive-circle\"></span>\r\n-                )}\r\n-                {event.isActive}\r\n-              </td>\r\n-              <td>\r\n-                <img\r\n-                  src={event.image_event}\r\n-                  alt={event.nom_event}\r\n-                  style={{ maxWidth: '100px' }}\r\n-                />\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"danger\"\r\n-                  onClick={() => this.handleDelete(event.id)}\r\n-                >\r\n-                  Delete\r\n-                </Button>\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"primary\"\r\n-                  onClick={() =>\r\n-                    this.props.history.push(`/edit-event/${event.id}`)\r\n-                  }\r\n-                >\r\n-                  Edit\r\n-                </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </Table>\r\n-    </div>\r\n-  );\r\n-}\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-import { Table, Button, FormGroup, Label, Input } from \"reactstrap\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: \"\", // Initialize start date filter to an empty string\r\n-    endDate: \"\",   // Initialize end date filter to an empty string\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle changes in the start date input\r\n- handleStartDateChange = (e) => {\r\n-  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle changes in the end date input\r\n-handleEndDateChange = (e) => {\r\n-  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDate, endDate } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    if (!startDate && !endDate) {\r\n-      return true; // No date filter is applied\r\n-    }\r\n-\r\n-    const eventDate = new Date(event.date_debut);\r\n-    const filterStartDate = startDate ? new Date(startDate) : null;\r\n-    const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-    if (filterStartDate && filterEndDate) {\r\n-      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n-    } else if (filterStartDate) {\r\n-      return eventDate >= filterStartDate;\r\n-    } else if (filterEndDate) {\r\n-      return eventDate <= filterEndDate;\r\n-    }\r\n-\r\n-    return true;\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-render() {\r\n-  return (\r\n-    <div className=\"content\">\r\n-      <ToastContainer />\r\n-      <h1 className=\"mb-4\">Event List</h1>\r\n-      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-        Export to PDF\r\n-      </Button>\r\n-      <FormGroup>\r\n-        <Label for=\"startDate\">Start Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          id=\"startDate\"\r\n-          value={this.state.startDate}\r\n-          onChange={this.handleStartDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <FormGroup>\r\n-        <Label for=\"endDate\">End Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          id=\"endDate\"\r\n-          value={this.state.endDate}\r\n-          onChange={this.handleEndDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <Table striped bordered hover responsive>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>ID</th>\r\n-            <th>Event Name</th>\r\n-            <th>Location</th>\r\n-            <th>Start Date</th>\r\n-            <th>End Date</th>\r\n-            <th>Status</th>\r\n-            <th>Image</th>\r\n-            <th>DELETE</th>\r\n-            <th>EDIT</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {this.state.filteredEvents.map((event) => (\r\n-            <tr key={event.id}>\r\n-              <td>{event.id}</td>\r\n-              <td>{event.nom_event}</td>\r\n-              <td>{event.lieu_event}</td>\r\n-              <td>{event.date_debut}</td>\r\n-              <td>{event.date_fin}</td>\r\n-              <td>\r\n-                {event.isActive === \"Active\" ? (\r\n-                  <span className=\"active-circle\"></span>\r\n-                ) : (\r\n-                  <span className=\"inactive-circle\"></span>\r\n-                )}\r\n-                {event.isActive}\r\n-              </td>\r\n-              <td>\r\n-                <img\r\n-                  src={event.image_event}\r\n-                  alt={event.nom_event}\r\n-                  style={{ maxWidth: '100px' }}\r\n-                />\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"danger\"\r\n-                  onClick={() => this.handleDelete(event.id)}\r\n-                >\r\n-                  Delete\r\n-                </Button>\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"primary\"\r\n-                  onClick={() =>\r\n-                    this.props.history.push(`/edit-event/${event.id}`)\r\n-                  }\r\n-                >\r\n-                  Edit\r\n-                </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </Table>\r\n-    </div>\r\n-  );\r\n-}\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: \"\", // Initialize start date filter to an empty string\r\n-    endDate: \"\",   // Initialize end date filter to an empty string\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle changes in the start date input\r\n- handleStartDateChange = (e) => {\r\n-  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle changes in the end date input\r\n-handleEndDateChange = (e) => {\r\n-  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDate, endDate } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    if (!startDate && !endDate) {\r\n-      return true; // No date filter is applied\r\n-    }\r\n-\r\n-    const eventDate = new Date(event.date_debut);\r\n-    const filterStartDate = startDate ? new Date(startDate) : null;\r\n-    const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-    if (filterStartDate && filterEndDate) {\r\n-      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n-    } else if (filterStartDate) {\r\n-      return eventDate >= filterStartDate;\r\n-    } else if (filterEndDate) {\r\n-      return eventDate <= filterEndDate;\r\n-    }\r\n-\r\n-    return true;\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-render() {\r\n-  return (\r\n-    <div className=\"content\">\r\n-      <ToastContainer />\r\n-      <h1 className=\"mb-4\">Event List</h1>\r\n-      <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-        Export to PDF\r\n-      </Button>\r\n-      <FormGroup>\r\n-        <Label for=\"startDate\">Start Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          id=\"startDate\"\r\n-          value={this.state.startDate}\r\n-          onChange={this.handleStartDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <FormGroup>\r\n-        <Label for=\"endDate\">End Date:</Label>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          id=\"endDate\"\r\n-          value={this.state.endDate}\r\n-          onChange={this.handleEndDateChange}\r\n-        />\r\n-      </FormGroup>\r\n-      <Table striped bordered hover responsive>\r\n-        <thead>\r\n-          <tr>\r\n-            <th>ID</th>\r\n-            <th>Event Name</th>\r\n-            <th>Location</th>\r\n-            <th>Start Date</th>\r\n-            <th>End Date</th>\r\n-            <th>Status</th>\r\n-            <th>Image</th>\r\n-            <th>DELETE</th>\r\n-            <th>EDIT</th>\r\n-          </tr>\r\n-        </thead>\r\n-        <tbody>\r\n-          {this.state.filteredEvents.map((event) => (\r\n-            <tr key={event.id}>\r\n-              <td>{event.id}</td>\r\n-              <td>{event.nom_event}</td>\r\n-              <td>{event.lieu_event}</td>\r\n-              <td>{event.date_debut}</td>\r\n-              <td>{event.date_fin}</td>\r\n-              <td>\r\n-                {event.isActive === \"Active\" ? (\r\n-                  <span className=\"active-circle\"></span>\r\n-                ) : (\r\n-                  <span className=\"inactive-circle\"></span>\r\n-                )}\r\n-                {event.isActive}\r\n-              </td>\r\n-              <td>\r\n-                <img\r\n-                  src={event.image_event}\r\n-                  alt={event.nom_event}\r\n-                  style={{ maxWidth: '100px' }}\r\n-                />\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"danger\"\r\n-                  onClick={() => this.handleDelete(event.id)}\r\n-                >\r\n-                  Delete\r\n-                </Button>\r\n-              </td>\r\n-              <td>\r\n-                <Button\r\n-                  color=\"primary\"\r\n-                  onClick={() =>\r\n-                    this.props.history.push(`/edit-event/${event.id}`)\r\n-                  }\r\n-                >\r\n-                  Edit\r\n-                </Button>\r\n-              </td>\r\n-            </tr>\r\n-          ))}\r\n-        </tbody>\r\n-      </Table>\r\n-    </div>\r\n-  );\r\n-}\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: \"\", // Initialize start date filter to an empty string\r\n-    endDate: \"\",   // Initialize end date filter to an empty string\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle changes in the start date input\r\n- handleStartDateChange = (e) => {\r\n-  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle changes in the end date input\r\n-handleEndDateChange = (e) => {\r\n-  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDate, endDate } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    if (!startDate && !endDate) {\r\n-      return true; // No date filter is applied\r\n-    }\r\n-\r\n-    const eventDate = new Date(event.date_debut);\r\n-    const filterStartDate = startDate ? new Date(startDate) : null;\r\n-    const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-    if (filterStartDate && filterEndDate) {\r\n-      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n-    } else if (filterStartDate) {\r\n-      return eventDate >= filterStartDate;\r\n-    } else if (filterEndDate) {\r\n-      return eventDate <= filterEndDate;\r\n-    }\r\n-\r\n-    return true;\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n   render() {\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n+        <FormGroup>\r\n+          <Label for=\"startDate\">Start Date:</Label>\r\n+          <Input\r\n+            type=\"date\"\r\n+            name=\"startDate\"\r\n+            id=\"startDate\"\r\n+            value={this.state.startDate}\r\n+            onChange={this.handleStartDateChange}\r\n+          />\r\n+        </FormGroup>\r\n+        <FormGroup>\r\n+          <Label for=\"endDate\">End Date:</Label>\r\n+          <Input\r\n+            type=\"date\"\r\n+            name=\"endDate\"\r\n+            id=\"endDate\"\r\n+            value={this.state.endDate}\r\n+            onChange={this.handleEndDateChange}\r\n+          />\r\n+        </FormGroup>\r\n         <Table striped bordered hover responsive>\r\n           <thead>\r\n             <tr>\r\n               <th>ID</th>\r\n@@ -1458,22 +165,22 @@\n               <th>EDIT</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {this.state.events.map((event) => (\r\n+            {this.state.filteredEvents.map((event) => (\r\n               <tr key={event.id}>\r\n                 <td>{event.id}</td>\r\n                 <td>{event.nom_event}</td>\r\n                 <td>{event.lieu_event}</td>\r\n                 <td>{event.date_debut}</td>\r\n                 <td>{event.date_fin}</td>\r\n                 <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                  {event.isActive === \"Active\" ? (\r\n                     <span className=\"active-circle\"></span>\r\n                   ) : (\r\n                     <span className=\"inactive-circle\"></span>\r\n                   )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n+                  {event.isActive}\r\n                 </td>\r\n                 <td>\r\n                   <img\r\n                     src={event.image_event}\r\n@@ -1508,796 +215,4 @@\n   }\r\n }\r\n \r\n export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n-              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n-              <th>EDIT</th> {/* Add a new column for the delete button */}\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {event.isActive === \"Active\" ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {event.isActive}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n-                    alt={event.nom_event} // Texte alternatif pour l'image\r\n-                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n-              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n-              <th>EDIT</th> {/* Add a new column for the delete button */}\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {event.isActive === \"Active\" ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {event.isActive}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n-                    alt={event.nom_event} // Texte alternatif pour l'image\r\n-                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        // Filter out inactive events based on the end date\r\n-        const filteredEvents = response.data.filter((event) => {\r\n-          const endDate = new Date(event.date_fin);\r\n-          const today = new Date();\r\n-          return event.isActive === \"Active\" && endDate >= today;\r\n-        });\r\n-\r\n-        this.setState({ events: filteredEvents });\r\n-        toast.success(\"Welcome to the event list\");\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n-              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n-              <th>EDIT</th> {/* Add a new column for the delete button */}\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {event.isActive === \"Active\" ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {event.isActive}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n-                    alt={event.nom_event} // Texte alternatif pour l'image\r\n-                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n-              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {event.isActive === \"Active\" ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {event.isActive}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n-                    alt={event.nom_event} // Texte alternatif pour l'image\r\n-                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n"
                },
                {
                    "date": 1695929764069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695929943513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,35 @@\n import React, { Component } from \"react\";\r\n import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n+import { Table, Button, Input, Form } from \"reactstrap\";\r\n import jsPDF from \"jspdf\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import \"./design.css\";\r\n \r\n class EventList extends Component {\r\n   state = {\r\n     events: [],\r\n+    filteredEvents: [], // Add a new state property for filtered events\r\n+    startDateFilter: \"\", // Initialize start date filter\r\n+    endDateFilter: \"\", // Initialize end date filter\r\n   };\r\n \r\n   componentDidMount() {\r\n     // Fetch events from the API when the component mounts\r\n     axios\r\n       .get(\"http://localhost:8084/events\")\r\n       .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+        this.setState({ events: response.data, filteredEvents: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Display the welcome notification\r\n       })\r\n       .catch((error) => {\r\n         console.error(\"Error fetching events:\", error);\r\n       });\r\n   }\r\n \r\n   exportToPDF = () => {\r\n-    const { events } = this.state;\r\n+    const { filteredEvents } = this.state; // Use filtered events for exporting\r\n \r\n     // Create a new PDF document\r\n     const pdf = new jsPDF();\r\n \r\n@@ -39,9 +42,9 @@\n       \"End Date\",\r\n       \"Status\",\r\n       \"Image\",\r\n     ];\r\n-    const data = events.map((event) => [\r\n+    const data = filteredEvents.map((event) => [\r\n       event.id,\r\n       event.nom_event,\r\n       event.lieu_event,\r\n       event.date_debut,\r\n@@ -67,31 +70,81 @@\n       .then((response) => {\r\n         // Remove the deleted event from the state\r\n         this.setState((prevState) => ({\r\n           events: prevState.events.filter((event) => event.id !== eventId),\r\n+          filteredEvents: prevState.filteredEvents.filter((event) => event.id !== eventId),\r\n         }));\r\n \r\n-        // Afficher une notification de suppression réussie\r\n+        // Display a success deletion notification\r\n         toast.success(\"Event deleted successfully\");\r\n \r\n         console.log(\"Event deleted:\", response.data);\r\n       })\r\n       .catch((error) => {\r\n         console.error(\"Error deleting event:\", error);\r\n       });\r\n   };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n \r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  // Handle start date filter change\r\n+  handleStartDateFilterChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n   };\r\n \r\n+  // Handle end date filter change\r\n+  handleEndDateFilterChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n+  };\r\n+\r\n+  // Filter events based on date range\r\n+  filterEvents = () => {\r\n+    const { events, startDateFilter, endDateFilter } = this.state;\r\n+\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const startDate = new Date(event.date_debut);\r\n+      const endDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event's start date is after or equal to the start date filter\r\n+      // and the event's end date is before or equal to the end date filter\r\n+      return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+\r\n   render() {\r\n+    const { startDateFilter, endDateFilter, filteredEvents } = this.state;\r\n+\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n+        <Form>\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.filterEvents}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button\r\n+            color=\"danger\"\r\n+            onClick={() => {\r\n+              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n+            }}\r\n+          >\r\n+            Clear Filters\r\n+          </Button>\r\n+        </Form>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n         <Table striped bordered hover responsive>\r\n@@ -108,22 +161,22 @@\n               <th>EDIT</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {this.state.events.map((event) => (\r\n+            {filteredEvents.map((event) => (\r\n               <tr key={event.id}>\r\n                 <td>{event.id}</td>\r\n                 <td>{event.nom_event}</td>\r\n                 <td>{event.lieu_event}</td>\r\n                 <td>{event.date_debut}</td>\r\n                 <td>{event.date_fin}</td>\r\n                 <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                  {event.isActive === \"Active\" ? (\r\n                     <span className=\"active-circle\"></span>\r\n                   ) : (\r\n                     <span className=\"inactive-circle\"></span>\r\n                   )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n+                  {event.isActive}\r\n                 </td>\r\n                 <td>\r\n                   <img\r\n                     src={event.image_event}\r\n"
                },
                {
                    "date": 1695929951389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,32 @@\n import React, { Component } from \"react\";\r\n import axios from \"axios\";\r\n-import { Table, Button, Input, Form } from \"reactstrap\";\r\n+import { Table, Button } from \"reactstrap\";\r\n import jsPDF from \"jspdf\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import \"./design.css\";\r\n \r\n class EventList extends Component {\r\n   state = {\r\n     events: [],\r\n-    filteredEvents: [], // Add a new state property for filtered events\r\n-    startDateFilter: \"\", // Initialize start date filter\r\n-    endDateFilter: \"\", // Initialize end date filter\r\n   };\r\n \r\n   componentDidMount() {\r\n     // Fetch events from the API when the component mounts\r\n     axios\r\n       .get(\"http://localhost:8084/events\")\r\n       .then((response) => {\r\n-        this.setState({ events: response.data, filteredEvents: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Display the welcome notification\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n       })\r\n       .catch((error) => {\r\n         console.error(\"Error fetching events:\", error);\r\n       });\r\n   }\r\n \r\n   exportToPDF = () => {\r\n-    const { filteredEvents } = this.state; // Use filtered events for exporting\r\n+    const { events } = this.state;\r\n \r\n     // Create a new PDF document\r\n     const pdf = new jsPDF();\r\n \r\n@@ -42,9 +39,9 @@\n       \"End Date\",\r\n       \"Status\",\r\n       \"Image\",\r\n     ];\r\n-    const data = filteredEvents.map((event) => [\r\n+    const data = events.map((event) => [\r\n       event.id,\r\n       event.nom_event,\r\n       event.lieu_event,\r\n       event.date_debut,\r\n@@ -70,81 +67,31 @@\n       .then((response) => {\r\n         // Remove the deleted event from the state\r\n         this.setState((prevState) => ({\r\n           events: prevState.events.filter((event) => event.id !== eventId),\r\n-          filteredEvents: prevState.filteredEvents.filter((event) => event.id !== eventId),\r\n         }));\r\n \r\n-        // Display a success deletion notification\r\n+        // Afficher une notification de suppression réussie\r\n         toast.success(\"Event deleted successfully\");\r\n \r\n         console.log(\"Event deleted:\", response.data);\r\n       })\r\n       .catch((error) => {\r\n         console.error(\"Error deleting event:\", error);\r\n       });\r\n   };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n \r\n-  // Handle start date filter change\r\n-  handleStartDateFilterChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n   };\r\n \r\n-  // Handle end date filter change\r\n-  handleEndDateFilterChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n-  };\r\n-\r\n-  // Filter events based on date range\r\n-  filterEvents = () => {\r\n-    const { events, startDateFilter, endDateFilter } = this.state;\r\n-\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const startDate = new Date(event.date_debut);\r\n-      const endDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event's start date is after or equal to the start date filter\r\n-      // and the event's end date is before or equal to the end date filter\r\n-      return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-\r\n   render() {\r\n-    const { startDateFilter, endDateFilter, filteredEvents } = this.state;\r\n-\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n-        <Form>\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.filterEvents}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button\r\n-            color=\"danger\"\r\n-            onClick={() => {\r\n-              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n-            }}\r\n-          >\r\n-            Clear Filters\r\n-          </Button>\r\n-        </Form>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n         <Table striped bordered hover responsive>\r\n@@ -161,22 +108,22 @@\n               <th>EDIT</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {filteredEvents.map((event) => (\r\n+            {this.state.events.map((event) => (\r\n               <tr key={event.id}>\r\n                 <td>{event.id}</td>\r\n                 <td>{event.nom_event}</td>\r\n                 <td>{event.lieu_event}</td>\r\n                 <td>{event.date_debut}</td>\r\n                 <td>{event.date_fin}</td>\r\n                 <td>\r\n-                  {event.isActive === \"Active\" ? (\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n                     <span className=\"active-circle\"></span>\r\n                   ) : (\r\n                     <span className=\"inactive-circle\"></span>\r\n                   )}\r\n-                  {event.isActive}\r\n+                  {this.isEventActive(event.date_fin)}\r\n                 </td>\r\n                 <td>\r\n                   <img\r\n                     src={event.image_event}\r\n"
                },
                {
                    "date": 1695930001500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    filteredEvents: [], // Add a new state property for filtered events\r\n+    startDateFilter: \"\", // Initialize start date filter\r\n+    endDateFilter: \"\", // Initialize end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930036891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,189 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    filteredEvents: [], // Add a new state property for filtered events\r\n+    startDateFilter: \"\", // Initialize start date filter\r\n+    endDateFilter: \"\", // Initialize end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle start date filter change\r\n+ handleStartDateFilterChange = (e) => {\r\n+  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle end date filter change\r\n+handleEndDateFilterChange = (e) => {\r\n+  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDateFilter, endDateFilter } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    const startDate = new Date(event.date_debut);\r\n+    const endDate = new Date(event.date_fin);\r\n+\r\n+    // Check if the event's start date is after or equal to the start date filter\r\n+    // and the event's end date is before or equal to the end date filter\r\n+    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930069233,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    filteredEvents: [], // Add a new state property for filtered events\r\n+    startDateFilter: \"\", // Initialize start date filter\r\n+    endDateFilter: \"\", // Initialize end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle start date filter change\r\n+ handleStartDateFilterChange = (e) => {\r\n+  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle end date filter change\r\n+handleEndDateFilterChange = (e) => {\r\n+  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDateFilter, endDateFilter } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    const startDate = new Date(event.date_debut);\r\n+    const endDate = new Date(event.date_fin);\r\n+\r\n+    // Check if the event's start date is after or equal to the start date filter\r\n+    // and the event's end date is before or equal to the end date filter\r\n+    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Form>\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.filterEvents}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button\r\n+            color=\"danger\"\r\n+            onClick={() => {\r\n+              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n+            }}\r\n+          >\r\n+            Clear Filters\r\n+          </Button>\r\n+        </Form>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930080462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button, Input, Form } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    filteredEvents: [], // Add a new state property for filtered events\r\n+    startDateFilter: \"\", // Initialize start date filter\r\n+    endDateFilter: \"\", // Initialize end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle start date filter change\r\n+ handleStartDateFilterChange = (e) => {\r\n+  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle end date filter change\r\n+handleEndDateFilterChange = (e) => {\r\n+  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDateFilter, endDateFilter } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    const startDate = new Date(event.date_debut);\r\n+    const endDate = new Date(event.date_fin);\r\n+\r\n+    // Check if the event's start date is after or equal to the start date filter\r\n+    // and the event's end date is before or equal to the end date filter\r\n+    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Form>\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.filterEvents}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button\r\n+            color=\"danger\"\r\n+            onClick={() => {\r\n+              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n+            }}\r\n+          >\r\n+            Clear Filters\r\n+          </Button>\r\n+        </Form>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930129780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button, Input, Form } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    filteredEvents: [], // Add a new state property for filtered events\r\n+    startDateFilter: \"\", // Initialize start date filter\r\n+    endDateFilter: \"\", // Initialize end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle start date filter change\r\n+ handleStartDateFilterChange = (e) => {\r\n+  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle end date filter change\r\n+handleEndDateFilterChange = (e) => {\r\n+  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDateFilter, endDateFilter } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    const startDate = new Date(event.date_debut);\r\n+    const endDate = new Date(event.date_fin);\r\n+\r\n+    // Check if the event's start date is after or equal to the start date filter\r\n+    // and the event's end date is before or equal to the end date filter\r\n+    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter, filteredEvents } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Form>\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.filterEvents}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button\r\n+            color=\"danger\"\r\n+            onClick={() => {\r\n+              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n+            }}\r\n+          >\r\n+            Clear Filters\r\n+          </Button>\r\n+        </Form>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930172808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,218 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button, Input, Form } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    filteredEvents: [], // Add a new state property for filtered events\r\n+    startDateFilter: \"\", // Initialize start date filter\r\n+    endDateFilter: \"\", // Initialize end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+ // Handle start date filter change\r\n+ handleStartDateFilterChange = (e) => {\r\n+  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Handle end date filter change\r\n+handleEndDateFilterChange = (e) => {\r\n+  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n+};\r\n+\r\n+// Filter events based on date range\r\n+filterEvents = () => {\r\n+  const { events, startDateFilter, endDateFilter } = this.state;\r\n+\r\n+  const filteredEvents = events.filter((event) => {\r\n+    const startDate = new Date(event.date_debut);\r\n+    const endDate = new Date(event.date_fin);\r\n+\r\n+    // Check if the event's start date is after or equal to the start date filter\r\n+    // and the event's end date is before or equal to the end date filter\r\n+    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n+  });\r\n+\r\n+  this.setState({ filteredEvents });\r\n+};\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter, filteredEvents } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Form>\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateFilterChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.filterEvents}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button\r\n+            color=\"danger\"\r\n+            onClick={() => {\r\n+              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n+            }}\r\n+          >\r\n+            Clear Filters\r\n+          </Button>\r\n+        </Form>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {filteredEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930217945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930224098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,161 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+   render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930292692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,162 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930308130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Handle changes in the start date and end date input fields\r\n+  handleDateChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({ [name]: value }, () => {\r\n+      this.filterEvents(); // Call the filter function when the date filters change\r\n+    });\r\n+  };\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930317025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: '', // Initialize the start date filter\r\n+    endDate: '',   // Initialize the end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Handle changes in the start date and end date input fields\r\n+  handleDateChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({ [name]: value }, () => {\r\n+      this.filterEvents(); // Call the filter function when the date filters change\r\n+    });\r\n+  };\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930334013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: '', // Initialize the start date filter\r\n+    endDate: '',   // Initialize the end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Handle changes in the start date and end date input fields\r\n+  handleDateChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({ [name]: value }, () => {\r\n+      this.filterEvents(); // Call the filter function when the date filters change\r\n+    });\r\n+  };\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { startDate, endDate, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930358004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,195 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: '', // Initialize the start date filter\r\n+    endDate: '',   // Initialize the end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Handle changes in the start date and end date input fields\r\n+  handleDateChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({ [name]: value }, () => {\r\n+      this.filterEvents(); // Call the filter function when the date filters change\r\n+    });\r\n+  };\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { startDate, endDate, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {filteredEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930387148,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,214 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: '', // Initialize the start date filter\r\n+    endDate: '',   // Initialize the end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Handle changes in the start date and end date input fields\r\n+  handleDateChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({ [name]: value }, () => {\r\n+      this.filterEvents(); // Call the filter function when the date filters change\r\n+    });\r\n+  };\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { startDate, endDate, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <div className=\"mb-4\">\r\n+          <label className=\"mr-2\">Start Date:</label>\r\n+          <input\r\n+            type=\"date\"\r\n+            name=\"startDate\"\r\n+            value={startDate}\r\n+            onChange={this.handleDateChange}\r\n+          />\r\n+          <label className=\"ml-3 mr-2\">End Date:</label>\r\n+          <input\r\n+            type=\"date\"\r\n+            name=\"endDate\"\r\n+            value={endDate}\r\n+            onChange={this.handleDateChange}\r\n+          />\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {filteredEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930400437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,196 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: '', // Initialize the start date filter\r\n+    endDate: '',   // Initialize the end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Handle changes in the start date and end date input fields\r\n+  handleDateChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({ [name]: value }, () => {\r\n+      this.filterEvents(); // Call the filter function when the date filters change\r\n+    });\r\n+  };\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { startDate, endDate, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        \r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {filteredEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930420039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,211 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDate: '', // Initialize the start date filter\r\n+    endDate: '',   // Initialize the end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Handle changes in the start date and end date input fields\r\n+  handleDateChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({ [name]: value }, () => {\r\n+      this.filterEvents(); // Call the filter function when the date filters change\r\n+    });\r\n+  };\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { startDate, endDate, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <div className=\"mb-4\">\r\n+          <label className=\"mr-2\">Start Date:</label>\r\n+          <input\r\n+            type=\"date\"\r\n+            name=\"startDate\"\r\n+            value={startDate}\r\n+            onChange={this.handleDateChange}\r\n+          />\r\n+          <label className=\"ml-3 mr-2\">End Date:</label>\r\n+          <input\r\n+            type=\"date\"\r\n+            name=\"endDate\"\r\n+            value={endDate}\r\n+            onChange={this.handleDateChange}\r\n+          />\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {filteredEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930455316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,186 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Filter events based on the selected date range\r\n+  filterEvents = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = startDate ? new Date(startDate) : null;\r\n+      const filterEndDate = endDate ? new Date(endDate) : null;\r\n+\r\n+      // Check if the event is within the selected date range\r\n+      if (filterStartDate && filterEndDate) {\r\n+        return (\r\n+          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n+        );\r\n+      } else if (filterStartDate) {\r\n+        return eventStartDate >= filterStartDate;\r\n+      } else if (filterEndDate) {\r\n+        return eventEndDate <= filterEndDate;\r\n+      } else {\r\n+        return true; // If no date filters are set, include all events\r\n+      }\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930463025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,1753 +85,8 @@\n \r\n     return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n   };\r\n \r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: '', // Initialize the start date filter\r\n-    endDate: '',   // Initialize the end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Handle changes in the start date and end date input fields\r\n-  handleDateChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({ [name]: value }, () => {\r\n-      this.filterEvents(); // Call the filter function when the date filters change\r\n-    });\r\n-  };\r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { startDate, endDate, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <div className=\"mb-4\">\r\n-          <label className=\"mr-2\">Start Date:</label>\r\n-          <input\r\n-            type=\"date\"\r\n-            name=\"startDate\"\r\n-            value={startDate}\r\n-            onChange={this.handleDateChange}\r\n-          />\r\n-          <label className=\"ml-3 mr-2\">End Date:</label>\r\n-          <input\r\n-            type=\"date\"\r\n-            name=\"endDate\"\r\n-            value={endDate}\r\n-            onChange={this.handleDateChange}\r\n-          />\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {filteredEvents.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: '', // Initialize the start date filter\r\n-    endDate: '',   // Initialize the end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Handle changes in the start date and end date input fields\r\n-  handleDateChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({ [name]: value }, () => {\r\n-      this.filterEvents(); // Call the filter function when the date filters change\r\n-    });\r\n-  };\r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { startDate, endDate, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        \r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {filteredEvents.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: '', // Initialize the start date filter\r\n-    endDate: '',   // Initialize the end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Handle changes in the start date and end date input fields\r\n-  handleDateChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({ [name]: value }, () => {\r\n-      this.filterEvents(); // Call the filter function when the date filters change\r\n-    });\r\n-  };\r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { startDate, endDate, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <div className=\"mb-4\">\r\n-          <label className=\"mr-2\">Start Date:</label>\r\n-          <input\r\n-            type=\"date\"\r\n-            name=\"startDate\"\r\n-            value={startDate}\r\n-            onChange={this.handleDateChange}\r\n-          />\r\n-          <label className=\"ml-3 mr-2\">End Date:</label>\r\n-          <input\r\n-            type=\"date\"\r\n-            name=\"endDate\"\r\n-            value={endDate}\r\n-            onChange={this.handleDateChange}\r\n-          />\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {filteredEvents.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: '', // Initialize the start date filter\r\n-    endDate: '',   // Initialize the end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Handle changes in the start date and end date input fields\r\n-  handleDateChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({ [name]: value }, () => {\r\n-      this.filterEvents(); // Call the filter function when the date filters change\r\n-    });\r\n-  };\r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { startDate, endDate, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {filteredEvents.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: '', // Initialize the start date filter\r\n-    endDate: '',   // Initialize the end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Handle changes in the start date and end date input fields\r\n-  handleDateChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({ [name]: value }, () => {\r\n-      this.filterEvents(); // Call the filter function when the date filters change\r\n-    });\r\n-  };\r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { startDate, endDate, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: '', // Initialize the start date filter\r\n-    endDate: '',   // Initialize the end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Handle changes in the start date and end date input fields\r\n-  handleDateChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({ [name]: value }, () => {\r\n-      this.filterEvents(); // Call the filter function when the date filters change\r\n-    });\r\n-  };\r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Handle changes in the start date and end date input fields\r\n-  handleDateChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({ [name]: value }, () => {\r\n-      this.filterEvents(); // Call the filter function when the date filters change\r\n-    });\r\n-  };\r\n-  // Filter events based on the selected date range\r\n-  filterEvents = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = startDate ? new Date(startDate) : null;\r\n-      const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-      // Check if the event is within the selected date range\r\n-      if (filterStartDate && filterEndDate) {\r\n-        return (\r\n-          eventStartDate >= filterStartDate && eventEndDate <= filterEndDate\r\n-        );\r\n-      } else if (filterStartDate) {\r\n-        return eventStartDate >= filterStartDate;\r\n-      } else if (filterEndDate) {\r\n-        return eventEndDate <= filterEndDate;\r\n-      } else {\r\n-        return true; // If no date filters are set, include all events\r\n-      }\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n    render() {\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n@@ -1903,1765 +158,4 @@\n   }\r\n }\r\n \r\n export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button, Input, Form } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    filteredEvents: [], // Add a new state property for filtered events\r\n-    startDateFilter: \"\", // Initialize start date filter\r\n-    endDateFilter: \"\", // Initialize end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle start date filter change\r\n- handleStartDateFilterChange = (e) => {\r\n-  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle end date filter change\r\n-handleEndDateFilterChange = (e) => {\r\n-  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDateFilter, endDateFilter } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    const startDate = new Date(event.date_debut);\r\n-    const endDate = new Date(event.date_fin);\r\n-\r\n-    // Check if the event's start date is after or equal to the start date filter\r\n-    // and the event's end date is before or equal to the end date filter\r\n-    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter, filteredEvents } = this.state;\r\n-\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Form>\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.filterEvents}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button\r\n-            color=\"danger\"\r\n-            onClick={() => {\r\n-              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n-            }}\r\n-          >\r\n-            Clear Filters\r\n-          </Button>\r\n-        </Form>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {filteredEvents.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button, Input, Form } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    filteredEvents: [], // Add a new state property for filtered events\r\n-    startDateFilter: \"\", // Initialize start date filter\r\n-    endDateFilter: \"\", // Initialize end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle start date filter change\r\n- handleStartDateFilterChange = (e) => {\r\n-  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle end date filter change\r\n-handleEndDateFilterChange = (e) => {\r\n-  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDateFilter, endDateFilter } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    const startDate = new Date(event.date_debut);\r\n-    const endDate = new Date(event.date_fin);\r\n-\r\n-    // Check if the event's start date is after or equal to the start date filter\r\n-    // and the event's end date is before or equal to the end date filter\r\n-    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter, filteredEvents } = this.state;\r\n-\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Form>\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.filterEvents}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button\r\n-            color=\"danger\"\r\n-            onClick={() => {\r\n-              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n-            }}\r\n-          >\r\n-            Clear Filters\r\n-          </Button>\r\n-        </Form>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button, Input, Form } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    filteredEvents: [], // Add a new state property for filtered events\r\n-    startDateFilter: \"\", // Initialize start date filter\r\n-    endDateFilter: \"\", // Initialize end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle start date filter change\r\n- handleStartDateFilterChange = (e) => {\r\n-  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle end date filter change\r\n-handleEndDateFilterChange = (e) => {\r\n-  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDateFilter, endDateFilter } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    const startDate = new Date(event.date_debut);\r\n-    const endDate = new Date(event.date_fin);\r\n-\r\n-    // Check if the event's start date is after or equal to the start date filter\r\n-    // and the event's end date is before or equal to the end date filter\r\n-    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Form>\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.filterEvents}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button\r\n-            color=\"danger\"\r\n-            onClick={() => {\r\n-              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n-            }}\r\n-          >\r\n-            Clear Filters\r\n-          </Button>\r\n-        </Form>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    filteredEvents: [], // Add a new state property for filtered events\r\n-    startDateFilter: \"\", // Initialize start date filter\r\n-    endDateFilter: \"\", // Initialize end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle start date filter change\r\n- handleStartDateFilterChange = (e) => {\r\n-  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle end date filter change\r\n-handleEndDateFilterChange = (e) => {\r\n-  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDateFilter, endDateFilter } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    const startDate = new Date(event.date_debut);\r\n-    const endDate = new Date(event.date_fin);\r\n-\r\n-    // Check if the event's start date is after or equal to the start date filter\r\n-    // and the event's end date is before or equal to the end date filter\r\n-    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Form>\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateFilterChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.filterEvents}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button\r\n-            color=\"danger\"\r\n-            onClick={() => {\r\n-              this.setState({ startDateFilter: \"\", endDateFilter: \"\" }, this.filterEvents);\r\n-            }}\r\n-          >\r\n-            Clear Filters\r\n-          </Button>\r\n-        </Form>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    filteredEvents: [], // Add a new state property for filtered events\r\n-    startDateFilter: \"\", // Initialize start date filter\r\n-    endDateFilter: \"\", // Initialize end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle start date filter change\r\n- handleStartDateFilterChange = (e) => {\r\n-  this.setState({ startDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle end date filter change\r\n-handleEndDateFilterChange = (e) => {\r\n-  this.setState({ endDateFilter: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDateFilter, endDateFilter } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    const startDate = new Date(event.date_debut);\r\n-    const endDate = new Date(event.date_fin);\r\n-\r\n-    // Check if the event's start date is after or equal to the start date filter\r\n-    // and the event's end date is before or equal to the end date filter\r\n-    return startDate >= new Date(startDateFilter) && endDate <= new Date(endDateFilter);\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    filteredEvents: [], // Add a new state property for filtered events\r\n-    startDateFilter: \"\", // Initialize start date filter\r\n-    endDateFilter: \"\", // Initialize end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDate: \"\", // Initialize start date filter to an empty string\r\n-    endDate: \"\",   // Initialize end date filter to an empty string\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n- // Handle changes in the start date input\r\n- handleStartDateChange = (e) => {\r\n-  this.setState({ startDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Handle changes in the end date input\r\n-handleEndDateChange = (e) => {\r\n-  this.setState({ endDate: e.target.value }, this.filterEvents);\r\n-};\r\n-\r\n-// Filter events based on date range\r\n-filterEvents = () => {\r\n-  const { events, startDate, endDate } = this.state;\r\n-\r\n-  const filteredEvents = events.filter((event) => {\r\n-    if (!startDate && !endDate) {\r\n-      return true; // No date filter is applied\r\n-    }\r\n-\r\n-    const eventDate = new Date(event.date_debut);\r\n-    const filterStartDate = startDate ? new Date(startDate) : null;\r\n-    const filterEndDate = endDate ? new Date(endDate) : null;\r\n-\r\n-    if (filterStartDate && filterEndDate) {\r\n-      return eventDate >= filterStartDate && eventDate <= filterEndDate;\r\n-    } else if (filterStartDate) {\r\n-      return eventDate >= filterStartDate;\r\n-    } else if (filterEndDate) {\r\n-      return eventDate <= filterEndDate;\r\n-    }\r\n-\r\n-    return true;\r\n-  });\r\n-\r\n-  this.setState({ filteredEvents });\r\n-};\r\n-  render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <FormGroup>\r\n-          <Label for=\"startDate\">Start Date:</Label>\r\n-          <Input\r\n-            type=\"date\"\r\n-            name=\"startDate\"\r\n-            id=\"startDate\"\r\n-            value={this.state.startDate}\r\n-            onChange={this.handleStartDateChange}\r\n-          />\r\n-        </FormGroup>\r\n-        <FormGroup>\r\n-          <Label for=\"endDate\">End Date:</Label>\r\n-          <Input\r\n-            type=\"date\"\r\n-            name=\"endDate\"\r\n-            id=\"endDate\"\r\n-            value={this.state.endDate}\r\n-            onChange={this.handleEndDateChange}\r\n-          />\r\n-        </FormGroup>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.filteredEvents.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {event.isActive === \"Active\" ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {event.isActive}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n"
                },
                {
                    "date": 1695930532331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n \r\n class EventList extends Component {\r\n   state = {\r\n     events: [],\r\n+    startDate: '', // For filtering start date\r\n+    endDate: '',   // For filtering end date\r\n   };\r\n \r\n   componentDidMount() {\r\n     // Fetch events from the API when the component mounts\r\n"
                },
                {
                    "date": 1695930547986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,34 @@\n     const eventEndDate = new Date(endDate);\r\n \r\n     return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n   };\r\n+  // Add a method to handle date range changes\r\n+  handleDateRangeChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState({\r\n+      [name]: value,\r\n+    });\r\n+  };\r\n \r\n+  // Add a method to filter events based on the selected date range\r\n+  filterEventsByDate = () => {\r\n+    const { events, startDate, endDate } = this.state;\r\n+    const filteredEvents = events.filter((event) => {\r\n+      if (!startDate || !endDate) {\r\n+        // If no start date or end date is selected, do not filter\r\n+        return true;\r\n+      }\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const selectedStartDate = new Date(startDate);\r\n+      const selectedEndDate = new Date(endDate);\r\n+      return (\r\n+        eventStartDate >= selectedStartDate && eventEndDate <= selectedEndDate\r\n+      );\r\n+    });\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n    render() {\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n"
                },
                {
                    "date": 1695930568498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,16 +112,47 @@\n       );\r\n     });\r\n     this.setState({ events: filteredEvents });\r\n   };\r\n-   render() {\r\n+  render() {\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n+\r\n+        {/* Add date range input fields */}\r\n+        <Form inline className=\"mb-4\">\r\n+          <FormGroup className=\"mr-2\">\r\n+            <Label for=\"startDate\">Start Date</Label>\r\n+            <Input\r\n+              type=\"date\"\r\n+              name=\"startDate\"\r\n+              id=\"startDate\"\r\n+              onChange={this.handleDateRangeChange}\r\n+              value={this.state.startDate}\r\n+            />\r\n+          </FormGroup>\r\n+          <FormGroup className=\"mr-2\">\r\n+            <Label for=\"endDate\">End Date</Label>\r\n+            <Input\r\n+              type=\"date\"\r\n+              name=\"endDate\"\r\n+              id=\"endDate\"\r\n+              onChange={this.handleDateRangeChange}\r\n+              value={this.state.endDate}\r\n+            />\r\n+          </FormGroup>\r\n+          <Button\r\n+            color=\"primary\"\r\n+            onClick={this.filterEventsByDate}\r\n+          >\r\n+            Filter by Date\r\n+          </Button>\r\n+        </Form>\r\n+\r\n         <Table striped bordered hover responsive>\r\n           <thead>\r\n             <tr>\r\n               <th>ID</th>\r\n@@ -184,5 +215,5 @@\n     );\r\n   }\r\n }\r\n \r\n-export default EventList;\r\n+export default EventList;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695930581049,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { Component } from \"react\";\r\n import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n+import { Table, Button, Form, FormGroup, Label, Input } from \"reactstrap\";\r\n import jsPDF from \"jspdf\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import \"./design.css\";\r\n"
                },
                {
                    "date": 1695930737004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,8 +112,16 @@\n       );\r\n     });\r\n     this.setState({ events: filteredEvents });\r\n   };\r\n+\r\n+  // Add a method to clear the date range filter\r\n+  clearDateFilter = () => {\r\n+    this.setState({\r\n+      startDate: '',\r\n+      endDate: '',\r\n+    });\r\n+  };\r\n   render() {\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n"
                },
                {
                    "date": 1695930778927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,8 +157,17 @@\n             onClick={this.filterEventsByDate}\r\n           >\r\n             Filter by Date\r\n           </Button>\r\n+\r\n+          {/* Add a button to clear the date range filter */}\r\n+          <Button\r\n+            color=\"danger\"\r\n+            onClick={this.clearDateFilter}\r\n+            className=\"ml-2\"\r\n+          >\r\n+            Clear Filter\r\n+          </Button>\r\n         </Form>\r\n \r\n         <Table striped bordered hover responsive>\r\n           <thead>\r\n"
                },
                {
                    "date": 1695930889986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,15 @@\n import React, { Component } from \"react\";\r\n import axios from \"axios\";\r\n-import { Table, Button, Form, FormGroup, Label, Input } from \"reactstrap\";\r\n+import { Table, Button } from \"reactstrap\";\r\n import jsPDF from \"jspdf\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import \"./design.css\";\r\n \r\n class EventList extends Component {\r\n   state = {\r\n     events: [],\r\n-    startDate: '', // For filtering start date\r\n-    endDate: '',   // For filtering end date\r\n   };\r\n \r\n   componentDidMount() {\r\n     // Fetch events from the API when the component mounts\r\n@@ -86,90 +84,17 @@\n     const eventEndDate = new Date(endDate);\r\n \r\n     return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n   };\r\n-  // Add a method to handle date range changes\r\n-  handleDateRangeChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState({\r\n-      [name]: value,\r\n-    });\r\n-  };\r\n \r\n-  // Add a method to filter events based on the selected date range\r\n-  filterEventsByDate = () => {\r\n-    const { events, startDate, endDate } = this.state;\r\n-    const filteredEvents = events.filter((event) => {\r\n-      if (!startDate || !endDate) {\r\n-        // If no start date or end date is selected, do not filter\r\n-        return true;\r\n-      }\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const selectedStartDate = new Date(startDate);\r\n-      const selectedEndDate = new Date(endDate);\r\n-      return (\r\n-        eventStartDate >= selectedStartDate && eventEndDate <= selectedEndDate\r\n-      );\r\n-    });\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Add a method to clear the date range filter\r\n-  clearDateFilter = () => {\r\n-    this.setState({\r\n-      startDate: '',\r\n-      endDate: '',\r\n-    });\r\n-  };\r\n-  render() {\r\n+   render() {\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n-\r\n-        {/* Add date range input fields */}\r\n-        <Form inline className=\"mb-4\">\r\n-          <FormGroup className=\"mr-2\">\r\n-            <Label for=\"startDate\">Start Date</Label>\r\n-            <Input\r\n-              type=\"date\"\r\n-              name=\"startDate\"\r\n-              id=\"startDate\"\r\n-              onChange={this.handleDateRangeChange}\r\n-              value={this.state.startDate}\r\n-            />\r\n-          </FormGroup>\r\n-          <FormGroup className=\"mr-2\">\r\n-            <Label for=\"endDate\">End Date</Label>\r\n-            <Input\r\n-              type=\"date\"\r\n-              name=\"endDate\"\r\n-              id=\"endDate\"\r\n-              onChange={this.handleDateRangeChange}\r\n-              value={this.state.endDate}\r\n-            />\r\n-          </FormGroup>\r\n-          <Button\r\n-            color=\"primary\"\r\n-            onClick={this.filterEventsByDate}\r\n-          >\r\n-            Filter by Date\r\n-          </Button>\r\n-\r\n-          {/* Add a button to clear the date range filter */}\r\n-          <Button\r\n-            color=\"danger\"\r\n-            onClick={this.clearDateFilter}\r\n-            className=\"ml-2\"\r\n-          >\r\n-            Clear Filter\r\n-          </Button>\r\n-        </Form>\r\n-\r\n         <Table striped bordered hover responsive>\r\n           <thead>\r\n             <tr>\r\n               <th>ID</th>\r\n@@ -232,5 +157,5 @@\n     );\r\n   }\r\n }\r\n \r\n-export default EventList;\n\\ No newline at end of file\n+export default EventList;\r\n"
                },
                {
                    "date": 1695930994680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,19 @@\n \r\n class EventList extends Component {\r\n   state = {\r\n     events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n   };\r\n \r\n   componentDidMount() {\r\n     // Fetch events from the API when the component mounts\r\n+    this.fetchEvents();\r\n+  }\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n     axios\r\n       .get(\"http://localhost:8084/events\")\r\n       .then((response) => {\r\n         this.setState({ events: response.data });\r\n"
                },
                {
                    "date": 1695931035738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,50 @@\n \r\n     return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n   };\r\n \r\n-   render() {\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n"
                },
                {
                    "date": 1695931081668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n     // Fetch events from the API when the component mounts\r\n     this.fetchEvents();\r\n   }\r\n \r\n-  componentDidMount() {\r\n+  fetchEvents() {\r\n     // Fetch events from the API when the component mounts\r\n     axios\r\n       .get(\"http://localhost:8084/events\")\r\n       .then((response) => {\r\n"
                },
                {
                    "date": 1695931089024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,209 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    this.fetchEvents();\r\n+  }\r\n+\r\n+  fetchEvents=()=>{\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931128556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,8 +141,31 @@\n         <h1 className=\"mb-4\">Event List</h1>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n         <Table striped bordered hover responsive>\r\n           <thead>\r\n             <tr>\r\n               <th>ID</th>\r\n"
                },
                {
                    "date": 1695931145863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,232 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    this.fetchEvents();\r\n+  }\r\n+\r\n+  fetchEvents=()=>{\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.filterEventsByDate().map((event) => (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931173661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,232 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    this.fetchEvents();\r\n+  }\r\n+\r\n+  fetchEvents=()=>{\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931191055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { Component } from \"react\";\r\n import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n import jsPDF from \"jspdf\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import \"./design.css\";\r\n"
                },
                {
                    "date": 1695931197739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,232 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    this.fetchEvents();\r\n+  }\r\n+\r\n+  fetchEvents=()=>{\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931339196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,257 +13,25 @@\n     endDateFilter: \"\",   // State variable for end date filter\r\n   };\r\n \r\n   componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    this.fetchEvents();\r\n+    // Fetch all events from the API when the component mounts\r\n+    this.fetchAllEvents();\r\n   }\r\n-\r\n-  fetchEvents=()=>{\r\n-    // Fetch events from the API when the component mounts\r\n+  \r\n+  fetchAllEvents = () => {\r\n     axios\r\n       .get(\"http://localhost:8084/events\")\r\n       .then((response) => {\r\n         this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+        toast.success(\"Welcome to the event list\");\r\n       })\r\n       .catch((error) => {\r\n         console.error(\"Error fetching events:\", error);\r\n       });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n   };\r\n+  \r\n \r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    this.fetchEvents();\r\n-  }\r\n-\r\n-  fetchEvents=()=>{\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n   exportToPDF = () => {\r\n     const { events } = this.state;\r\n \r\n     // Create a new PDF document\r\n@@ -461,677 +229,4 @@\n   }\r\n }\r\n \r\n export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    this.fetchEvents();\r\n-  }\r\n-\r\n-  fetchEvents=()=>{\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.filterEventsByDate().map((event) => (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    this.fetchEvents();\r\n-  }\r\n-\r\n-  fetchEvents=()=>{\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    this.fetchEvents();\r\n-  }\r\n-\r\n-  fetchEvents() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n"
                },
                {
                    "date": 1695931416650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931489013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,215 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          value={filters.startDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"Start Date\"\r\n+          className=\"mb-2\"\r\n+        />\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          value={filters.endDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"End Date\"\r\n+          className=\"mb-4\"\r\n+        />\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931500253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931515664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,222 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          value={filters.startDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"Start Date\"\r\n+          className=\"mb-2\"\r\n+        />\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          value={filters.endDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"End Date\"\r\n+          className=\"mb-4\"\r\n+        />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931547007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,220 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          value={filters.startDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"Start Date\"\r\n+          className=\"mb-2\"\r\n+        />\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          value={filters.endDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"End Date\"\r\n+          className=\"mb-4\"\r\n+        />\r\n+\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931552777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,231 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n+\r\n+      return (\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n+      );\r\n+    });\r\n+\r\n+    return filteredEvents;\r\n+  };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931581568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931591167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931614421,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,192 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+\r\n+  render() {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931630596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Date Filter Inputs */}\r\n+              <div className=\"mb-4\">\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"Start Date\"\r\n+            value={startDateFilter}\r\n+            onChange={this.handleStartDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Input\r\n+            type=\"date\"\r\n+            placeholder=\"End Date\"\r\n+            value={endDateFilter}\r\n+            onChange={this.handleEndDateChange}\r\n+            className=\"mr-2\"\r\n+          />\r\n+          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n+            Apply Date Filter\r\n+          </Button>\r\n+          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n+            Clear Date Filter\r\n+          </Button>\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931653025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931670432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,202 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+\r\n+        </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931675593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          value={filters.startDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"Start Date\"\r\n+          className=\"mb-2\"\r\n+        />\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          value={filters.endDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"End Date\"\r\n+          className=\"mb-4\"\r\n+        />\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filterEventsByDate().map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931691947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,10 @@\n               <th>EDIT</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n+            {filteredEvents.map((event) => (\r\n+\r\n               <tr key={event.id}>\r\n                 <td>{event.id}</td>\r\n                 <td>{event.nom_event}</td>\r\n                 <td>{event.lieu_event}</td>\r\n"
                },
                {
                    "date": 1695931697866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          value={filters.startDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"Start Date\"\r\n+          className=\"mb-2\"\r\n+        />\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          value={filters.endDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"End Date\"\r\n+          className=\"mb-4\"\r\n+        />\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.filteredEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931767718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button , Input } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    startDateFilter: \"\", // State variable for start date filter\r\n+    endDateFilter: \"\",   // State variable for end date filter\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n+    toast.success(\"Welcome to list event\");\r\n+  }\r\n+\r\n+  fetchAllEvents = () => {\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  };\r\n+  \r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  handleFilterChange = (e) => {\r\n+    const { name, value } = e.target;\r\n+    this.setState(\r\n+      (prevState) => ({\r\n+        filters: {\r\n+          ...prevState.filters,\r\n+          [name]: value,\r\n+        },\r\n+      }),\r\n+      () => {\r\n+        this.filterEvents();\r\n+      }\r\n+    );\r\n+  };\r\n+\r\n+  filterEvents = () => {\r\n+    const { events, filters } = this.state;\r\n+\r\n+    // Filter events based on date range\r\n+    const filteredEvents = events.filter((event) => {\r\n+      const eventStartDate = new Date(event.date_debut);\r\n+      const eventEndDate = new Date(event.date_fin);\r\n+\r\n+      // Check if the event falls within the selected date range\r\n+      return (\r\n+        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n+        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+      );\r\n+    });\r\n+\r\n+    this.setState({ filteredEvents });\r\n+  };\r\n+  render() {\r\n+    const { filters, filteredEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"startDate\"\r\n+          value={filters.startDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"Start Date\"\r\n+          className=\"mb-2\"\r\n+        />\r\n+        <Input\r\n+          type=\"date\"\r\n+          name=\"endDate\"\r\n+          value={filters.endDate}\r\n+          onChange={this.handleFilterChange}\r\n+          placeholder=\"End Date\"\r\n+          className=\"mb-4\"\r\n+        />\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {filteredEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931786399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import React, { Component } from \"react\";\r\n import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n+import { Table, Button } from \"reactstrap\";\r\n import jsPDF from \"jspdf\";\r\n import { ToastContainer, toast } from 'react-toastify';\r\n import 'react-toastify/dist/ReactToastify.css';\r\n import \"./design.css\";\r\n@@ -13,23 +13,24 @@\n     endDateFilter: \"\",   // State variable for end date filter\r\n   };\r\n \r\n   componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n+    // Fetch events from the API when the component mounts\r\n+    this.fetchEvents();\r\n   }\r\n \r\n-  fetchAllEvents = () => {\r\n+  fetchEvents=()=>{\r\n+    // Fetch events from the API when the component mounts\r\n     axios\r\n       .get(\"http://localhost:8084/events\")\r\n       .then((response) => {\r\n         this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n       })\r\n       .catch((error) => {\r\n         console.error(\"Error fetching events:\", error);\r\n       });\r\n-  };\r\n-  \r\n+  }\r\n \r\n   exportToPDF = () => {\r\n     const { events } = this.state;\r\n \r\n@@ -91,65 +92,57 @@\n \r\n     return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n   };\r\n \r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n+  // Function to filter events based on date interval\r\n+  filterEventsByDate = () => {\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n+    const filteredEvents = this.state.events.filter((event) => {\r\n       const eventStartDate = new Date(event.date_debut);\r\n       const eventEndDate = new Date(event.date_fin);\r\n+      const filterStartDate = new Date(startDateFilter);\r\n+      const filterEndDate = new Date(endDateFilter);\r\n \r\n-      // Check if the event falls within the selected date range\r\n       return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n+        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n+        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n       );\r\n     });\r\n \r\n-    this.setState({ filteredEvents });\r\n+    return filteredEvents;\r\n   };\r\n+\r\n+  // Event handler for start date input\r\n+  handleStartDateChange = (e) => {\r\n+    this.setState({ startDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for end date input\r\n+  handleEndDateChange = (e) => {\r\n+    this.setState({ endDateFilter: e.target.value });\r\n+  };\r\n+\r\n+  // Event handler for applying the date filter\r\n+  handleApplyDateFilter = () => {\r\n+    const filteredEvents = this.filterEventsByDate();\r\n+    this.setState({ events: filteredEvents });\r\n+  };\r\n+\r\n+  // Event handler for clearing the date filter\r\n+  handleClearDateFilter = () => {\r\n+    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n+    this.fetchEvents(); // Reset to fetch all events\r\n+  };\r\n+\r\n   render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n+    const { startDateFilter, endDateFilter } = this.state;\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          value={filters.startDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"Start Date\"\r\n-          className=\"mb-2\"\r\n-        />\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          value={filters.endDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"End Date\"\r\n-          className=\"mb-4\"\r\n-        />\r\n         <Table striped bordered hover responsive>\r\n           <thead>\r\n             <tr>\r\n               <th>ID</th>\r\n@@ -163,9 +156,9 @@\n               <th>EDIT</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {filteredEvents.map((event) => (\r\n+            {this.state.events.map((event) => (\r\n               <tr key={event.id}>\r\n                 <td>{event.id}</td>\r\n                 <td>{event.nom_event}</td>\r\n                 <td>{event.lieu_event}</td>\r\n"
                },
                {
                    "date": 1695931791879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,89 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+  \r\n"
                },
                {
                    "date": 1695931883862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n+    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n+    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n+  };\r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+   render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931899649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n+    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n+    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n+  };  \r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+\r\n+   render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931905442,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,193 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n+    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n+    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n+  };  \r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        this.setState({ events: response.data });\r\n+        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Méthode pour trier les événements par date\r\n+  sortEventsByDate = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    const sortedEvents = [...events].sort((a, b) => {\r\n+      const dateA = new Date(a.date_fin);\r\n+      const dateB = new Date(b.date_fin);\r\n+      return dateA - dateB;\r\n+    });\r\n+\r\n+    this.setState({ sortedEvents, isSortedByDate: true, isSortedByStatus: false });\r\n+  };\r\n+\r\n+  // Méthode pour trier les événements par statut (actif/inactif)\r\n+  sortEventsByStatus = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    const sortedEvents = [...events].sort((a, b) => {\r\n+      if (this.isEventActive(a.date_fin) === 'Active') return -1;\r\n+      if (this.isEventActive(b.date_fin) === 'Active') return 1;\r\n+      return 0;\r\n+    });\r\n+\r\n+    this.setState({ sortedEvents, isSortedByDate: false, isSortedByStatus: true });\r\n+  };\r\n+\r\n+  // Méthode pour annuler le tri\r\n+  resetSorting = () => {\r\n+    this.setState({ sortedEvents: [], isSortedByDate: false, isSortedByStatus: false });\r\n+  };\r\n+   render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931921410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n+    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n+    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n+  };  \r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        const events = response.data;\r\n+        this.setState({ events, sortedEvents: events }); // Charger les événements triés par défaut\r\n+        toast.success(\"Welcome to list event\");\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Méthode pour trier les événements par date\r\n+  sortEventsByDate = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    const sortedEvents = [...events].sort((a, b) => {\r\n+      const dateA = new Date(a.date_fin);\r\n+      const dateB = new Date(b.date_fin);\r\n+      return dateA - dateB;\r\n+    });\r\n+\r\n+    this.setState({ sortedEvents, isSortedByDate: true, isSortedByStatus: false });\r\n+  };\r\n+\r\n+  // Méthode pour trier les événements par statut (actif/inactif)\r\n+  sortEventsByStatus = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    const sortedEvents = [...events].sort((a, b) => {\r\n+      if (this.isEventActive(a.date_fin) === 'Active') return -1;\r\n+      if (this.isEventActive(b.date_fin) === 'Active') return 1;\r\n+      return 0;\r\n+    });\r\n+\r\n+    this.setState({ sortedEvents, isSortedByDate: false, isSortedByStatus: true });\r\n+  };\r\n+\r\n+  // Méthode pour annuler le tri\r\n+  resetSorting = () => {\r\n+    this.setState({ sortedEvents: [], isSortedByDate: false, isSortedByStatus: false });\r\n+  };\r\n+   render() {\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {this.state.events.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"primary\"\r\n+                    onClick={() =>\r\n+                      this.props.history.push(`/edit-event/${event.id}`)\r\n+                    }\r\n+                  >\r\n+                    Edit\r\n+                  </Button>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                },
                {
                    "date": 1695931950547,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -126,827 +126,34 @@\n         <h1 className=\"mb-4\">Event List</h1>\r\n         <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n           Export to PDF\r\n         </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n-    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n-    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n-  };  \r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-  // Méthode pour trier les événements par date\r\n-  sortEventsByDate = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    const sortedEvents = [...events].sort((a, b) => {\r\n-      const dateA = new Date(a.date_fin);\r\n-      const dateB = new Date(b.date_fin);\r\n-      return dateA - dateB;\r\n-    });\r\n-\r\n-    this.setState({ sortedEvents, isSortedByDate: true, isSortedByStatus: false });\r\n-  };\r\n-\r\n-  // Méthode pour trier les événements par statut (actif/inactif)\r\n-  sortEventsByStatus = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    const sortedEvents = [...events].sort((a, b) => {\r\n-      if (this.isEventActive(a.date_fin) === 'Active') return -1;\r\n-      if (this.isEventActive(b.date_fin) === 'Active') return 1;\r\n-      return 0;\r\n-    });\r\n-\r\n-    this.setState({ sortedEvents, isSortedByDate: false, isSortedByStatus: true });\r\n-  };\r\n-\r\n-  // Méthode pour annuler le tri\r\n-  resetSorting = () => {\r\n-    this.setState({ sortedEvents: [], isSortedByDate: false, isSortedByStatus: false });\r\n-  };\r\n-   render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n+              {/* Boutons de tri */}\r\n+      <div className=\"mb-4\">\r\n+        <Button\r\n+          color=\"info\"\r\n+          onClick={this.sortEventsByDate}\r\n+          disabled={isSortedByDate}\r\n+          className=\"mr-2\"\r\n+        >\r\n+          Sort by Date\r\n         </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n-    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n-    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n-  };  \r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-   render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n+        <Button\r\n+          color=\"info\"\r\n+          onClick={this.sortEventsByStatus}\r\n+          disabled={isSortedByStatus}\r\n+          className=\"mr-2\"\r\n+        >\r\n+          Sort by Status\r\n         </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n-    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n-    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-   render() {\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n+        <Button\r\n+          color=\"secondary\"\r\n+          onClick={this.resetSorting}\r\n+          disabled={!isSortedByDate && !isSortedByStatus}\r\n+        >\r\n+          Reset Sorting\r\n         </Button>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.state.events.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n       </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  \r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch events from the API when the component mounts\r\n-    this.fetchEvents();\r\n-  }\r\n-\r\n-  fetchEvents=()=>{\r\n-    // Fetch events from the API when the component mounts\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  }\r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n         <Table striped bordered hover responsive>\r\n           <thead>\r\n             <tr>\r\n               <th>ID</th>\r\n@@ -1010,3166 +217,4 @@\n   }\r\n }\r\n \r\n export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          value={filters.startDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"Start Date\"\r\n-          className=\"mb-2\"\r\n-        />\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          value={filters.endDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"End Date\"\r\n-          className=\"mb-4\"\r\n-        />\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filteredEvents.map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          value={filters.startDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"Start Date\"\r\n-          className=\"mb-2\"\r\n-        />\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          value={filters.endDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"End Date\"\r\n-          className=\"mb-4\"\r\n-        />\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {filteredEvents.map((event) => (\r\n-\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          value={filters.startDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"Start Date\"\r\n-          className=\"mb-2\"\r\n-        />\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          value={filters.endDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"End Date\"\r\n-          className=\"mb-4\"\r\n-        />\r\n-\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          value={filters.startDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"Start Date\"\r\n-          className=\"mb-2\"\r\n-        />\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          value={filters.endDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"End Date\"\r\n-          className=\"mb-4\"\r\n-        />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  handleFilterChange = (e) => {\r\n-    const { name, value } = e.target;\r\n-    this.setState(\r\n-      (prevState) => ({\r\n-        filters: {\r\n-          ...prevState.filters,\r\n-          [name]: value,\r\n-        },\r\n-      }),\r\n-      () => {\r\n-        this.filterEvents();\r\n-      }\r\n-    );\r\n-  };\r\n-\r\n-  filterEvents = () => {\r\n-    const { events, filters } = this.state;\r\n-\r\n-    // Filter events based on date range\r\n-    const filteredEvents = events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-\r\n-      // Check if the event falls within the selected date range\r\n-      return (\r\n-        (!filters.startDate || eventStartDate >= new Date(filters.startDate)) &&\r\n-        (!filters.endDate || eventEndDate <= new Date(filters.endDate))\r\n-      );\r\n-    });\r\n-\r\n-    this.setState({ filteredEvents });\r\n-  };\r\n-\r\n-  render() {\r\n-    const { filters, filteredEvents } = this.state;\r\n-\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"startDate\"\r\n-          value={filters.startDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"Start Date\"\r\n-          className=\"mb-2\"\r\n-        />\r\n-        <Input\r\n-          type=\"date\"\r\n-          name=\"endDate\"\r\n-          value={filters.endDate}\r\n-          onChange={this.handleFilterChange}\r\n-          placeholder=\"End Date\"\r\n-          className=\"mb-4\"\r\n-        />\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    this.fetchAllEvents(); // Load all events without filtering when the component mounts\r\n-    toast.success(\"Welcome to list event\");\r\n-  }\r\n-\r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n-import React, { Component } from \"react\";\r\n-import axios from \"axios\";\r\n-import { Table, Button , Input } from \"reactstrap\";\r\n-import jsPDF from \"jspdf\";\r\n-import { ToastContainer, toast } from 'react-toastify';\r\n-import 'react-toastify/dist/ReactToastify.css';\r\n-import \"./design.css\";\r\n-\r\n-class EventList extends Component {\r\n-  state = {\r\n-    events: [],\r\n-    startDateFilter: \"\", // State variable for start date filter\r\n-    endDateFilter: \"\",   // State variable for end date filter\r\n-  };\r\n-\r\n-  componentDidMount() {\r\n-    // Fetch all events from the API when the component mounts\r\n-    this.fetchAllEvents();\r\n-  }\r\n-  \r\n-  fetchAllEvents = () => {\r\n-    axios\r\n-      .get(\"http://localhost:8084/events\")\r\n-      .then((response) => {\r\n-        this.setState({ events: response.data });\r\n-        toast.success(\"Welcome to the event list\");\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error fetching events:\", error);\r\n-      });\r\n-  };\r\n-  \r\n-\r\n-  exportToPDF = () => {\r\n-    const { events } = this.state;\r\n-\r\n-    // Create a new PDF document\r\n-    const pdf = new jsPDF();\r\n-\r\n-    // Define the columns and rows for the table\r\n-    const columns = [\r\n-      \"ID\",\r\n-      \"Event Name\",\r\n-      \"Location\",\r\n-      \"Start Date\",\r\n-      \"End Date\",\r\n-      \"Status\",\r\n-      \"Image\",\r\n-    ];\r\n-    const data = events.map((event) => [\r\n-      event.id,\r\n-      event.nom_event,\r\n-      event.lieu_event,\r\n-      event.date_debut,\r\n-      event.date_fin,\r\n-      event.isActive,\r\n-      event.image_event,\r\n-    ]);\r\n-\r\n-    // Auto-table plugin to create a table in PDF\r\n-    pdf.autoTable({\r\n-      head: [columns],\r\n-      body: data,\r\n-    });\r\n-\r\n-    // Save the PDF or open it in a new tab\r\n-    pdf.save(\"EventList.pdf\");\r\n-  };\r\n-\r\n-  handleDelete = (eventId) => {\r\n-    // Make a DELETE request to delete the event with the given ID\r\n-    axios\r\n-      .delete(`http://localhost:8084/events/${eventId}`)\r\n-      .then((response) => {\r\n-        // Remove the deleted event from the state\r\n-        this.setState((prevState) => ({\r\n-          events: prevState.events.filter((event) => event.id !== eventId),\r\n-        }));\r\n-\r\n-        // Afficher une notification de suppression réussie\r\n-        toast.success(\"Event deleted successfully\");\r\n-\r\n-        console.log(\"Event deleted:\", response.data);\r\n-      })\r\n-      .catch((error) => {\r\n-        console.error(\"Error deleting event:\", error);\r\n-      });\r\n-  };\r\n-  isEventActive = (endDate) => {\r\n-    const currentDate = new Date();\r\n-    const eventEndDate = new Date(endDate);\r\n-\r\n-    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n-  };\r\n-\r\n-  // Function to filter events based on date interval\r\n-  filterEventsByDate = () => {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    const filteredEvents = this.state.events.filter((event) => {\r\n-      const eventStartDate = new Date(event.date_debut);\r\n-      const eventEndDate = new Date(event.date_fin);\r\n-      const filterStartDate = new Date(startDateFilter);\r\n-      const filterEndDate = new Date(endDateFilter);\r\n-\r\n-      return (\r\n-        (eventStartDate >= filterStartDate && eventStartDate <= filterEndDate) ||\r\n-        (eventEndDate >= filterStartDate && eventEndDate <= filterEndDate)\r\n-      );\r\n-    });\r\n-\r\n-    return filteredEvents;\r\n-  };\r\n-\r\n-  // Event handler for start date input\r\n-  handleStartDateChange = (e) => {\r\n-    this.setState({ startDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for end date input\r\n-  handleEndDateChange = (e) => {\r\n-    this.setState({ endDateFilter: e.target.value });\r\n-  };\r\n-\r\n-  // Event handler for applying the date filter\r\n-  handleApplyDateFilter = () => {\r\n-    const filteredEvents = this.filterEventsByDate();\r\n-    this.setState({ events: filteredEvents });\r\n-  };\r\n-\r\n-  // Event handler for clearing the date filter\r\n-  handleClearDateFilter = () => {\r\n-    this.setState({ startDateFilter: \"\", endDateFilter: \"\" });\r\n-    this.fetchEvents(); // Reset to fetch all events\r\n-  };\r\n-\r\n-  render() {\r\n-    const { startDateFilter, endDateFilter } = this.state;\r\n-    return (\r\n-      <div className=\"content\">\r\n-        <ToastContainer />\r\n-        <h1 className=\"mb-4\">Event List</h1>\r\n-        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n-          Export to PDF\r\n-        </Button>\r\n-              {/* Date Filter Inputs */}\r\n-              <div className=\"mb-4\">\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"Start Date\"\r\n-            value={startDateFilter}\r\n-            onChange={this.handleStartDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Input\r\n-            type=\"date\"\r\n-            placeholder=\"End Date\"\r\n-            value={endDateFilter}\r\n-            onChange={this.handleEndDateChange}\r\n-            className=\"mr-2\"\r\n-          />\r\n-          <Button color=\"primary\" onClick={this.handleApplyDateFilter}>\r\n-            Apply Date Filter\r\n-          </Button>\r\n-          <Button color=\"secondary\" onClick={this.handleClearDateFilter}>\r\n-            Clear Date Filter\r\n-          </Button>\r\n-        </div>\r\n-        <Table striped bordered hover responsive>\r\n-          <thead>\r\n-            <tr>\r\n-              <th>ID</th>\r\n-              <th>Event Name</th>\r\n-              <th>Location</th>\r\n-              <th>Start Date</th>\r\n-              <th>End Date</th>\r\n-              <th>Status</th>\r\n-              <th>Image</th>\r\n-              <th>DELETE</th>\r\n-              <th>EDIT</th>\r\n-            </tr>\r\n-          </thead>\r\n-          <tbody>\r\n-            {this.filterEventsByDate().map((event) => (\r\n-              <tr key={event.id}>\r\n-                <td>{event.id}</td>\r\n-                <td>{event.nom_event}</td>\r\n-                <td>{event.lieu_event}</td>\r\n-                <td>{event.date_debut}</td>\r\n-                <td>{event.date_fin}</td>\r\n-                <td>\r\n-                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n-                    <span className=\"active-circle\"></span>\r\n-                  ) : (\r\n-                    <span className=\"inactive-circle\"></span>\r\n-                  )}\r\n-                  {this.isEventActive(event.date_fin)}\r\n-                </td>\r\n-                <td>\r\n-                  <img\r\n-                    src={event.image_event}\r\n-                    alt={event.nom_event}\r\n-                    style={{ maxWidth: '100px' }}\r\n-                  />\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"danger\"\r\n-                    onClick={() => this.handleDelete(event.id)}\r\n-                  >\r\n-                    Delete\r\n-                  </Button>\r\n-                </td>\r\n-                <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n-                </td>\r\n-              </tr>\r\n-            ))}\r\n-          </tbody>\r\n-        </Table>\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n-\r\n-export default EventList;\r\n"
                },
                {
                    "date": 1695931960490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n               <th>EDIT</th>\r\n             </tr>\r\n           </thead>\r\n           <tbody>\r\n-            {this.state.events.map((event) => (\r\n+            {sortedEvents.map((event) => (\r\n               <tr key={event.id}>\r\n                 <td>{event.id}</td>\r\n                 <td>{event.nom_event}</td>\r\n                 <td>{event.lieu_event}</td>\r\n"
                },
                {
                    "date": 1695931982252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,8 +119,9 @@\n   resetSorting = () => {\r\n     this.setState({ sortedEvents: [], isSortedByDate: false, isSortedByStatus: false });\r\n   };\r\n    render() {\r\n+    const { isSortedByDate, isSortedByStatus, sortedEvents } = this.state;\r\n     return (\r\n       <div className=\"content\">\r\n         <ToastContainer />\r\n         <h1 className=\"mb-4\">Event List</h1>\r\n"
                },
                {
                    "date": 1695938571032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,16 +199,11 @@\n                     Delete\r\n                   </Button>\r\n                 </td>\r\n                 <td>\r\n-                  <Button\r\n-                    color=\"primary\"\r\n-                    onClick={() =>\r\n-                      this.props.history.push(`/edit-event/${event.id}`)\r\n-                    }\r\n-                  >\r\n-                    Edit\r\n-                  </Button>\r\n+                <Link to={`/admin/products/edit/${product.id}`} className=\"btn btn-primary btn-sm ml-2\">\r\n+                  Edit\r\n+                </Link>\r\n                 </td>\r\n               </tr>\r\n             ))}\r\n           </tbody>\r\n"
                },
                {
                    "date": 1695938628751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n                     Delete\r\n                   </Button>\r\n                 </td>\r\n                 <td>\r\n-                <Link to={`/admin/events/edit/${product.id}`} className=\"btn btn-primary btn-sm ml-2\">\r\n+                <Link to={`/admin/events/${product.id}`} className=\"btn btn-primary btn-sm ml-2\">\r\n                   Edit\r\n                 </Link>\r\n                 </td>\r\n               </tr>\r\n"
                },
                {
                    "date": 1695938636516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,216 @@\n+import React, { Component } from \"react\";\r\n+import axios from \"axios\";\r\n+import { Table, Button } from \"reactstrap\";\r\n+import jsPDF from \"jspdf\";\r\n+import { ToastContainer, toast } from 'react-toastify';\r\n+import 'react-toastify/dist/ReactToastify.css';\r\n+import \"./design.css\";\r\n+\r\n+class EventList extends Component {\r\n+  state = {\r\n+    events: [],\r\n+    sortedEvents: [], // Ajouter un état pour stocker les événements triés\r\n+    isSortedByDate: false, // Par défaut, le tri par date est désactivé\r\n+    isSortedByStatus: false, // Par défaut, le tri par statut est désactivé\r\n+  };  \r\n+\r\n+  componentDidMount() {\r\n+    // Fetch events from the API when the component mounts\r\n+    axios\r\n+      .get(\"http://localhost:8084/events\")\r\n+      .then((response) => {\r\n+        const events = response.data;\r\n+        this.setState({ events, sortedEvents: events }); // Charger les événements triés par défaut\r\n+        toast.success(\"Welcome to list event\");\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error fetching events:\", error);\r\n+      });\r\n+  }\r\n+\r\n+  exportToPDF = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    // Create a new PDF document\r\n+    const pdf = new jsPDF();\r\n+\r\n+    // Define the columns and rows for the table\r\n+    const columns = [\r\n+      \"ID\",\r\n+      \"Event Name\",\r\n+      \"Location\",\r\n+      \"Start Date\",\r\n+      \"End Date\",\r\n+      \"Status\",\r\n+      \"Image\",\r\n+    ];\r\n+    const data = events.map((event) => [\r\n+      event.id,\r\n+      event.nom_event,\r\n+      event.lieu_event,\r\n+      event.date_debut,\r\n+      event.date_fin,\r\n+      event.isActive,\r\n+      event.image_event,\r\n+    ]);\r\n+\r\n+    // Auto-table plugin to create a table in PDF\r\n+    pdf.autoTable({\r\n+      head: [columns],\r\n+      body: data,\r\n+    });\r\n+\r\n+    // Save the PDF or open it in a new tab\r\n+    pdf.save(\"EventList.pdf\");\r\n+  };\r\n+\r\n+  handleDelete = (eventId) => {\r\n+    // Make a DELETE request to delete the event with the given ID\r\n+    axios\r\n+      .delete(`http://localhost:8084/events/${eventId}`)\r\n+      .then((response) => {\r\n+        // Remove the deleted event from the state\r\n+        this.setState((prevState) => ({\r\n+          events: prevState.events.filter((event) => event.id !== eventId),\r\n+        }));\r\n+\r\n+        // Afficher une notification de suppression réussie\r\n+        toast.success(\"Event deleted successfully\");\r\n+\r\n+        console.log(\"Event deleted:\", response.data);\r\n+      })\r\n+      .catch((error) => {\r\n+        console.error(\"Error deleting event:\", error);\r\n+      });\r\n+  };\r\n+  isEventActive = (endDate) => {\r\n+    const currentDate = new Date();\r\n+    const eventEndDate = new Date(endDate);\r\n+\r\n+    return eventEndDate > currentDate ? 'Active' : 'Inactive';\r\n+  };\r\n+  // Méthode pour trier les événements par date\r\n+  sortEventsByDate = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    const sortedEvents = [...events].sort((a, b) => {\r\n+      const dateA = new Date(a.date_fin);\r\n+      const dateB = new Date(b.date_fin);\r\n+      return dateA - dateB;\r\n+    });\r\n+\r\n+    this.setState({ sortedEvents, isSortedByDate: true, isSortedByStatus: false });\r\n+  };\r\n+\r\n+  // Méthode pour trier les événements par statut (actif/inactif)\r\n+  sortEventsByStatus = () => {\r\n+    const { events } = this.state;\r\n+\r\n+    const sortedEvents = [...events].sort((a, b) => {\r\n+      if (this.isEventActive(a.date_fin) === 'Active') return -1;\r\n+      if (this.isEventActive(b.date_fin) === 'Active') return 1;\r\n+      return 0;\r\n+    });\r\n+\r\n+    this.setState({ sortedEvents, isSortedByDate: false, isSortedByStatus: true });\r\n+  };\r\n+\r\n+  // Méthode pour annuler le tri\r\n+  resetSorting = () => {\r\n+    this.setState({ sortedEvents: [], isSortedByDate: false, isSortedByStatus: false });\r\n+  };\r\n+   render() {\r\n+    const { isSortedByDate, isSortedByStatus, sortedEvents } = this.state;\r\n+    return (\r\n+      <div className=\"content\">\r\n+        <ToastContainer />\r\n+        <h1 className=\"mb-4\">Event List</h1>\r\n+        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n+          Export to PDF\r\n+        </Button>\r\n+              {/* Boutons de tri */}\r\n+      <div className=\"mb-4\">\r\n+        <Button\r\n+          color=\"info\"\r\n+          onClick={this.sortEventsByDate}\r\n+          disabled={isSortedByDate}\r\n+          className=\"mr-2\"\r\n+        >\r\n+          Sort by Date\r\n+        </Button>\r\n+        <Button\r\n+          color=\"info\"\r\n+          onClick={this.sortEventsByStatus}\r\n+          disabled={isSortedByStatus}\r\n+          className=\"mr-2\"\r\n+        >\r\n+          Sort by Status\r\n+        </Button>\r\n+        <Button\r\n+          color=\"secondary\"\r\n+          onClick={this.resetSorting}\r\n+          disabled={!isSortedByDate && !isSortedByStatus}\r\n+        >\r\n+          Reset Sorting\r\n+        </Button>\r\n+      </div>\r\n+        <Table striped bordered hover responsive>\r\n+          <thead>\r\n+            <tr>\r\n+              <th>ID</th>\r\n+              <th>Event Name</th>\r\n+              <th>Location</th>\r\n+              <th>Start Date</th>\r\n+              <th>End Date</th>\r\n+              <th>Status</th>\r\n+              <th>Image</th>\r\n+              <th>DELETE</th>\r\n+              <th>EDIT</th>\r\n+            </tr>\r\n+          </thead>\r\n+          <tbody>\r\n+            {sortedEvents.map((event) => (\r\n+              <tr key={event.id}>\r\n+                <td>{event.id}</td>\r\n+                <td>{event.nom_event}</td>\r\n+                <td>{event.lieu_event}</td>\r\n+                <td>{event.date_debut}</td>\r\n+                <td>{event.date_fin}</td>\r\n+                <td>\r\n+                  {this.isEventActive(event.date_fin) === 'Active' ? (\r\n+                    <span className=\"active-circle\"></span>\r\n+                  ) : (\r\n+                    <span className=\"inactive-circle\"></span>\r\n+                  )}\r\n+                  {this.isEventActive(event.date_fin)}\r\n+                </td>\r\n+                <td>\r\n+                  <img\r\n+                    src={event.image_event}\r\n+                    alt={event.nom_event}\r\n+                    style={{ maxWidth: '100px' }}\r\n+                  />\r\n+                </td>\r\n+                <td>\r\n+                  <Button\r\n+                    color=\"danger\"\r\n+                    onClick={() => this.handleDelete(event.id)}\r\n+                  >\r\n+                    Delete\r\n+                  </Button>\r\n+                </td>\r\n+                <td>\r\n+                <Link to={`/admin/event/${product.id}`} className=\"btn btn-primary btn-sm ml-2\">\r\n+                  Edit\r\n+                </Link>\r\n+                </td>\r\n+              </tr>\r\n+            ))}\r\n+          </tbody>\r\n+        </Table>\r\n+      </div>\r\n+    );\r\n+  }\r\n+}\r\n+\r\n+export default EventList;\r\n"
                }
            ],
            "date": 1695923814928,
            "name": "Commit-0",
            "content": "import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { Table, Button } from \"reactstrap\";\r\nimport jsPDF from \"jspdf\";\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport \"./design.css\";\r\n\r\nclass EventList extends Component {\r\n  state = {\r\n    events: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    // Fetch events from the API when the component mounts\r\n    axios\r\n      .get(\"http://localhost:8084/events\")\r\n      .then((response) => {\r\n        this.setState({ events: response.data });\r\n        toast.success(\"Welcome to list event\"); // Affiche la notification de bienvenue\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error fetching events:\", error);\r\n      });\r\n  }\r\n\r\n  exportToPDF = () => {\r\n    const { events } = this.state;\r\n\r\n    // Create a new PDF document\r\n    const pdf = new jsPDF();\r\n\r\n    // Define the columns and rows for the table\r\n    const columns = [\r\n      \"ID\",\r\n      \"Event Name\",\r\n      \"Location\",\r\n      \"Start Date\",\r\n      \"End Date\",\r\n      \"Status\",\r\n      \"Image\",\r\n    ];\r\n    const data = events.map((event) => [\r\n      event.id,\r\n      event.nom_event,\r\n      event.lieu_event,\r\n      event.date_debut,\r\n      event.date_fin,\r\n      event.isActive,\r\n      event.image_event,\r\n    ]);\r\n\r\n    // Auto-table plugin to create a table in PDF\r\n    pdf.autoTable({\r\n      head: [columns],\r\n      body: data,\r\n    });\r\n\r\n    // Save the PDF or open it in a new tab\r\n    pdf.save(\"EventList.pdf\");\r\n  };\r\n\r\n  handleDelete = (eventId) => {\r\n    // Make a DELETE request to delete the event with the given ID\r\n    axios\r\n      .delete(`http://localhost:8084/events/${eventId}`)\r\n      .then((response) => {\r\n        // Remove the deleted event from the state\r\n        this.setState((prevState) => ({\r\n          events: prevState.events.filter((event) => event.id !== eventId),\r\n        }));\r\n\r\n        // Afficher une notification de suppression réussie\r\n        toast.success(\"Event deleted successfully\");\r\n\r\n        console.log(\"Event deleted:\", response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error deleting event:\", error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"content\">\r\n        <ToastContainer /> {/* Ajoutez cette ligne */}\r\n        <h1 className=\"mb-4\">Event List</h1>\r\n        <Button color=\"primary\" onClick={this.exportToPDF} className=\"mb-4\">\r\n          Export to PDF\r\n        </Button>\r\n        <Table striped bordered hover responsive>\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Event Name</th>\r\n              <th>Location</th>\r\n              <th>Start Date</th>\r\n              <th>End Date</th>\r\n              <th>Status</th>\r\n              <th>Image</th> {/* Ajout de la colonne pour l'image */}\r\n              <th>DELETE</th> {/* Add a new column for the delete button */}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.state.events.map((event) => (\r\n              <tr key={event.id}>\r\n                <td>{event.id}</td>\r\n                <td>{event.nom_event}</td>\r\n                <td>{event.lieu_event}</td>\r\n                <td>{event.date_debut}</td>\r\n                <td>{event.date_fin}</td>\r\n                <td>\r\n                  {event.isActive === \"Active\" ? (\r\n                    <span className=\"active-circle\"></span>\r\n                  ) : (\r\n                    <span className=\"inactive-circle\"></span>\r\n                  )}\r\n                  {event.isActive}\r\n                </td>\r\n                <td>\r\n                  <img\r\n                    src={event.image_event} // Utilisez l'URL de l'image de l'événement\r\n                    alt={event.nom_event} // Texte alternatif pour l'image\r\n                    style={{ maxWidth: '100px' }} // Ajustement de la largeur si nécessaire\r\n                  />\r\n                </td>\r\n                <td>\r\n                  <Button\r\n                    color=\"danger\"\r\n                    onClick={() => this.handleDelete(event.id)}\r\n                  >\r\n                    Delete\r\n                  </Button>\r\n                </td>\r\n                <td>\r\n                  <Button\r\n                    color=\"primary\"\r\n                    onClick={() =>\r\n                      this.props.history.push(`/edit-event/${event.id}`)\r\n                    }\r\n                  >\r\n                    Edit\r\n                  </Button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EventList;\r\n"
        }
    ]
}